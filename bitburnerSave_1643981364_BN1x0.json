{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":318,\"hp\":10,\"max_hp\":10,\"strength\":176,\"defense\":1,\"dexterity\":26,\"agility\":143,\"charisma\":150,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":10807011.296434425,\"strength_exp\":129249.00000018772,\"defense_exp\":0,\"dexterity_exp\":636.5,\"agility_exp\":45040.499999977575,\"charisma_exp\":57090.745999747225,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":44316585.0408144,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{\"Alpha Enterprises\":\"Junior Software Engineer\"},\"companyName\":\"Alpha Enterprises\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-2-2048\",\"pserv-3-32768\",\"pserv-4-262144\",\"pserv-5-16384\",\"pserv-6-4096\",\"pserv-7-2048\",\"pserv-16-65536\",\"pserv-17-16384\",\"pserv-18-8192\",\"pserv-19-4096\",\"pserv-20-2048\",\"pserv-36-64TB\",\"pserv-37-8TB\",\"pserv-38-4TB\",\"pserv-39-2TB\",\"pserv-42-4TB\",\"pserv-43-2TB\",\"pserv-47-64TB\",\"pserv-48-8TB\",\"pserv-49-4TB\",\"pserv-50-2TB\",\"pserv-51-4TB\",\"pserv-52-2TB\",\"pserv-53-2TB\",\"pserv-54-1TB\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":1478261.3999691946,\"ram\":64,\"totalMoneyGenerated\":888373990.6803923,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":1467271.5999713244,\"ram\":64,\"totalMoneyGenerated\":888348067.564465,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90054.19999972713,\"ram\":64,\"totalMoneyGenerated\":825889258.6224011,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90046.99999972711,\"ram\":64,\"totalMoneyGenerated\":825829993.4386033,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90043.79999972711,\"ram\":64,\"totalMoneyGenerated\":825804193.7728078,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90040.7999997271,\"ram\":64,\"totalMoneyGenerated\":825776679.8451698,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90037.19999972708,\"ram\":64,\"totalMoneyGenerated\":825738280.6464766,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90032.39999972706,\"ram\":64,\"totalMoneyGenerated\":825694138.9622557,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90027.79999972705,\"ram\":64,\"totalMoneyGenerated\":825653784.90172,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90023.79999972704,\"ram\":64,\"totalMoneyGenerated\":825611657.4793417,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9171.309212672853,\"onlineTimeSeconds\":90011.99999972699,\"ram\":64,\"totalMoneyGenerated\":781287857.6693505,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.5,\"onlineTimeSeconds\":85185.19999972249,\"ram\":1,\"totalMoneyGenerated\":127777.80000027742,\"name\":\"hacknet-node-11\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-4.1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":true,\"focus\":false,\"workType\":\"Studying or Taking a class at university\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":2,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":480,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":44403.99999997834,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":-10656960,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"training your agility at a gym\",\"crimeType\":\"\",\"timeWorked\":5244600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643981364121,\"totalPlaytime\":1479744000,\"playtimeSinceLastAug\":1479744000,\"playtimeSinceLastBitnode\":1479744000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-51313807.200000025,\"codingcontract\":0,\"corporation\":0,\"crime\":2815000,\"gang\":0,\"hacking\":36547312163.251595,\"hacknet\":9164135681.618917,\"hacknet_expenses\":-4502834327.097045,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":44315585.0408144,\"work\":101942880,\"servers\":-32989130534.507523,\"other\":-5305200000,\"augmentations\":-2923411470.900881}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-51313807.200000025,\"codingcontract\":0,\"corporation\":0,\"crime\":2815000,\"gang\":0,\"hacking\":36547312163.251595,\"hacknet\":9164135681.618917,\"hacknet_expenses\":-4502834327.097045,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":44315585.0408144,\"work\":101942880,\"servers\":-32989130534.507523,\"other\":-5305200000,\"augmentations\":-2923411470.900881}},\"scriptProdSinceLastAug\":35646678263.88629,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642502927292},{\"ID\":\"NS2\",\"unlockedOn\":1642504972779},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642662597019},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642670308256},{\"ID\":\"TOR\",\"unlockedOn\":1642670724035},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642750546476},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643791843782},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643796338934},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643835731417},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643872301814},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643872301827},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1643872301833},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643891331819},{\"ID\":\"FROZE\",\"unlockedOn\":1643901986929},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643960007558}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"55.9.7.1\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":9.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"Daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":1,\"ramUsage\":3.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/5e64679d-329b-46c5-9145-a25cb4f0a0d7\",\"moduleSequenceNumber\":546},{\"filename\":\"Daemon.js\",\"url\":\"blob:https://danielyxie.github.io/e6bd8af6-79e9-4c53-8ffd-5106b188c860\",\"moduleSequenceNumber\":1629}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"HGW.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":7,\"ramUsage\":5.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/18e9b4db-a047-4903-a300-96133fad9d68\",\"moduleSequenceNumber\":546},{\"filename\":\"HGW.js\",\"url\":\"blob:https://danielyxie.github.io/164cd292-734b-46ef-8570-abf862175c51\",\"moduleSequenceNumber\":7746}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * takes parameters in the form of key=value\\n * no spaces!\\n * param options:\\n * target=server: server to hack \\n */\\n\\nimport {needsWeaken, getMaxGrowth} from 'lib.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tlet target = ns.args[0];\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, target)){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t}\\n\\t\\twhile(ns.growthAnalyze(target, getMaxGrowth(ns, target), ns.getServer().cpuCores)){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basicHack.js\",\"url\":\"blob:https://danielyxie.github.io/d9d6d613-3a88-4ce1-b881-8f8443a9d80d\"}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":539,\"_hash\":\"357a160fd1de6f7230cb25d0d073a8c2460597065dd58dbbe625f267717444f0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServersSortedByProfit, formatNumber, getMaxBuyableServerRam, canNuke, getHackedServers, getServersWithClosedPorts, getNukableServers, getServersToHack, updatePortData, getPortData, getMostProfitableServer, getAllAvailableThreads } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\t//let target = getTarget(ns);\\n\\t//ns.purchaseServer('pserv-3-32768', 32768);\\n\\t//ns.print(getHackedServers(ns));\\n\\t//ns.print(getPortData(ns, 20));\\nlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\t\\t\\n\\tns.tprint(data.target);\\t//ns.print(ns.formulas.hacking.growTime(ns.getServer(target), ns.getPlayer()));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} availableThreads\\n * **/\\nfunction hgwBatch(ns, target, availableThreads) {\\n\\tlet hthreads = 1 / ns.hackAnalyze(target) | 0;\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\tif (availableThreads) maxThreads = availableThreads;\\n\\n\\twhile (hthreads * ns.hackAnalyze(target) == 1\\n\\t\\t|| hgwThreads(ns, target, hthreads) > maxThreads) {\\n\\t\\ththreads--;\\n\\t}\\n\\treturn {\\n\\t\\t'hack': hthreads,\\n\\t\\t'grow': growThreads(ns, target, hthreads),\\n\\t\\t'weaken': weakenThreads(ns, hthreads, growThreads(ns, target, hthreads))\\n\\t};\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} hackThreads\\n * **/\\nfunction growThreads(ns, target, hackThreads) {\\n\\treturn Math.ceil(ns.growthAnalyze(target, 1 / (1 - ns.hackAnalyze(target) * hackThreads)));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} hackThreads\\n * \\t@param {Number} growThreads\\n * **/\\nfunction weakenThreads(ns, hackThreads, growThreads) {\\n\\treturn Math.ceil((ns.hackAnalyzeSecurity(hackThreads) + ns.growthAnalyzeSecurity(growThreads)) / ns.weakenAnalyze(1));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} hackThreads\\n * **/\\nfunction hgwThreads(ns, target, hackThreads) {\\n\\tlet h = hackThreads;\\n\\tlet g = growThreads(ns, target, h);\\n\\tlet w = weakenThreads(ns, h, g);\\n\\treturn h + g + w;\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/693c0477-1b66-4b16-9ad7-45d963e81d90\",\"moduleSequenceNumber\":8172},{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/28f01cc7-88e7-406b-9955-0154d058a587\",\"moduleSequenceNumber\":11430}],\"dependents\":[],\"ramUsage\":9.2,\"server\":\"home\",\"moduleSequenceNumber\":540,\"_hash\":\"1af10b7ded311fdcf2f6a0c4939531fcd348b16bc43fbdb37ec33a76789f997f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {scpAll, getMostProfitableServer} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tawait scpAll(ns, ['allhack.js', 'lib.js', 'prepareHGW.js',\\n\\t'Hack.js', 'Grow.js', 'Weaken.js']);\\n\\tlet target = getMostProfitableServer(ns);\\n\\tns.run('prepareHGW.js', 1, target);\\n\\t//execAllMax(ns, 'allhack.js', target);\\n\\t\\n\\t//execAllMax(ns, 'allhack.js', target);\\n\\t//ns.spawn('keepProfitable.js',1, target);\\n}\",\"filename\":\"infest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/8e582f41-acfe-46ad-91a9-7eab61757501\",\"moduleSequenceNumber\":4396},{\"filename\":\"infest.js\",\"url\":\"blob:https://danielyxie.github.io/f9be39c4-4e20-4d99-ae94-bbf307d7fce1\",\"moduleSequenceNumber\":4838}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":541,\"_hash\":\"0c7eadb6fd7aa9178fe13336016c65ce2facf8da8bfcb3ff49a6ee8e5d6d12e3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"home\",\"moduleSequenceNumber\":542,\"_hash\":\"196138d3c1cfc44f34d94d66d43263dc4e910ea04392012dded0409ceb515abb\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runScript, getPortData } from 'lib.js';\\n\\nvar die;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tif (ns.args.length) {\\n\\t\\tvar die = ns.args[0] == 'die';\\n\\t}\\n\\n\\tif (die) {\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tawait runScript(ns, 'DaemonSetup.js');\\n\\tawait runScript(ns, 'OpenPorts.js');\\n\\tawait runScript(ns, 'NukeAll.js');\\n\\tawait runScript(ns, 'HGWSetup.js');\\n\\n\\twhile (!die) {\\n\\t\\tawait runScript(ns, 'PurchaseServers.js');\\n\\t\\tswitch (getPortData(ns, 20).status) {\\n\\t\\t\\tcase 'openports':\\n\\t\\t\\t\\tawait runScript(ns, 'OpenPorts.js');\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'nuke':\\n\\t\\t\\t\\tawait runScript(ns, 'NukeAll.js');\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'hgwsetup':\\n\\t\\t\\t\\tawait runScript(ns, 'HGWSetup.js');\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'hgw':\\n\\t\\t\\t\\tawait runScript(ns, 'HGW.js')\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tns.print(getPortData(ns, 20));\\n\\t\\tif(getPortData(ns, 20).status == 'end') break;\\n\\t}\\n}\",\"filename\":\"Daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/b848b3aa-9da7-40b3-888c-741f245fec95\",\"moduleSequenceNumber\":542},{\"filename\":\"Daemon.js\",\"url\":\"blob:https://danielyxie.github.io/c8664a31-9543-4a0b-a204-4c572c8b1aca\",\"moduleSequenceNumber\":7541}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":7541,\"_hash\":\"f3701943c2ce862c7dec9dbcdbf442acd76bfc5d47294af0167727653222e3f4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {cleanAllRemote} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tcleanAllRemote(ns);\\t\\n}\",\"filename\":\"CleanRemotes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":63937},{\"filename\":\"CleanRemotes.js\",\"url\":\"blob:https://danielyxie.github.io/e5ae3510-295e-4b44-a5da-a98ed7f22c8c\",\"moduleSequenceNumber\":73618}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":544,\"_hash\":\"315a7e1f13289bc6922e661fef58688a3e12a62264d7f74a661fdb5572e6d1bf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {killAllRemote} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tkillAllRemote(ns);\\n}\",\"filename\":\"KillRemotes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/6f581d70-0b17-49b6-8341-5d4aa1045414\",\"moduleSequenceNumber\":8172},{\"filename\":\"KillRemotes.js\",\"url\":\"blob:https://danielyxie.github.io/19307b06-6102-4082-98ac-53cff045f5c6\",\"moduleSequenceNumber\":20694}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":545,\"_hash\":\"94f9d6c0026053db5bcadfd103e3d543bb82a03dd037825cc1b987345160d54f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":546,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":547,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":548,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":549,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortData, updatePortData, coexec} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet hgw =  getPortData(ns, 20).hgw;\\n\\tlet target = hgw.target;\\n\\n\\tlet deltaWG = hgw.weaken.time - hgw.grow.time - 200;\\n\\tlet deltaGH = hgw.grow.time - hgw.hack.time - 200;\\n\\n\\n\\tcoexec(ns, 'Weaken.js', hgw.weaken.threads, 1.75, '--target', target);\\n\\tcoexec(ns, 'Grow.js', hgw.grow.threads, 1.75, '--target', target, '--delay', deltaWG);\\n\\tcoexec(ns, 'Hack.js', hgw.hack.threads, 1.70, '--target', target, '--delay', deltaGH);\\n\\tawait ns.sleep(hgw.hack.time+600);\\n\\n\\tupdatePortData(ns, 20, 'status', 'hgwsetup');\\t\\n}\",\"filename\":\"HGW.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/6eb3ecbe-c779-4e66-8b77-9111f294bd79\",\"moduleSequenceNumber\":542},{\"filename\":\"HGW.js\",\"url\":\"blob:https://danielyxie.github.io/a118ee1e-9f01-498b-ab2a-c4e644927f30\",\"moduleSequenceNumber\":7555}],\"dependents\":[],\"ramUsage\":5.9,\"server\":\"home\",\"moduleSequenceNumber\":7555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServersWithClosedPorts, updatePortData} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet opened = {};\\n\\n\\tfor (let s of getServersWithClosedPorts(ns)) {\\n\\t\\tlet ports = [];\\n\\t\\tif (!ns.getServer(s).sshPortOpen && ns.fileExists('BruteSSH.exe', 'home')) {\\n\\t\\t\\tns.brutessh(s);\\n\\t\\t\\tports.push('ssh');\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).ftpPortOpen && ns.fileExists('FTPCrack.exe', 'home')) {\\n\\t\\t\\tns.ftpcrack(s);\\n\\t\\t\\tports.push('ftp');\\n\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).smtpPortOpen && ns.fileExists('relaySMTP.exe', 'home')) {\\n\\t\\t\\tns.relaysmtp(s);\\n\\t\\t\\tports.push('smtp');\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).httpPortOpen && ns.fileExists('HTTPWorm.exe', 'home')) {\\n\\t\\t\\tns.httpworm(s);\\n\\t\\t\\tports.push('http');\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).sqlPortOpen && ns.fileExists('SQLInject.exe', 'home')) {\\n\\t\\t\\tns.sqlinject(s)\\t\\n\\t\\t\\tports.push('sql');\\n\\t\\t}\\n\\t\\tif(ports.length) opened[s] = ports;\\n\\t}\\n\\tif(opened.length){\\n\\t\\tawait updatePortData(ns, 20, 'status', 'nuke');\\n\\t\\tawait updatePortData(ns, 20, 'opened', opened);\\n\\t}else{\\n\\t\\tawait updatePortData(ns, 20, 'status', 'hgw');\\n\\t}\\n}\",\"filename\":\"OpenPorts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/87a7a297-d26c-4ab6-85f6-9234ae73c350\",\"moduleSequenceNumber\":542},{\"filename\":\"OpenPorts.js\",\"url\":\"blob:https://danielyxie.github.io/b5d122f7-a65e-4249-a874-0f8c402ce3ca\",\"moduleSequenceNumber\":7551}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":7551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {updatePortData, getPortData, getMostProfitableServer, scpAll} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait deployScripts(ns);\\n\\tawait updatePortData(ns, 20, 'status', 'startup');\\n\\tawait updatePortData(ns, 20, 'opened', []);\\n\\tawait updatePortData(ns, 20, 'nuked', {});\\n\\t\\n}\\n\\n/** @param {NS} ns **/\\nasync function deployScripts(ns) {\\n\\tawait scpAll(ns, ['lib.js', 'Hack.js', 'Grow.js', 'Weaken.js']);\\n}\",\"filename\":\"DaemonSetup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/46d459ba-0c7a-46e9-884a-067a9ccae222\",\"moduleSequenceNumber\":542},{\"filename\":\"DaemonSetup.js\",\"url\":\"blob:https://danielyxie.github.io/1ccbe0a4-860e-4e04-b075-74cb8418cb80\",\"moduleSequenceNumber\":7542}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":7542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {updatePortData, getPortData, canNuke, getNukableServers} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet openedServers = getPortData(ns, 20).opened;\\n\\tlet nuked = [];\\n\\tlet nukable = getNukableServers(ns);\\n\\tns.print(openedServers);\\n\\tfor(let s of nukable){\\n\\t\\tns.nuke(s);\\n\\t\\tnuked.push(s);\\n\\t}\\n\\t/*\\n\\tif(openedServers.length){\\n\\t\\tfor(let [s, p] of Object.entries(openedServers)){\\n\\t\\t\\tif(canNuke(ns, s)){\\n\\t\\t\\t\\tns.nuke(s);\\n\\t\\t\\t\\tnuked.push(s);\\n\\t\\t\\t\\tdelete openedServers[s];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tawait updatePortData(ns, 20, 'opened', openedServers);*/\\n\\tawait updatePortData(ns, 20, 'nuked', nuked);\\n\\tif(nuked.length) await updatePortData(ns, 20, 'status', 'hgwsetup');\\n}\",\"filename\":\"NukeAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/c0bdc13f-ad9b-4c89-971b-afa046398b4d\",\"moduleSequenceNumber\":542},{\"filename\":\"NukeAll.js\",\"url\":\"blob:https://danielyxie.github.io/4ef24cfa-6513-4d3c-a281-27bf86e6b2cd\",\"moduleSequenceNumber\":7552}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":7552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getRemoteServers} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor (let s of getRemoteServers(ns)) {\\n\\t\\tns.scriptKill('Hack.js', s);\\n\\t\\tns.scriptKill('Grow.js', s);\\n\\t\\tns.scriptKill('Weaken.js', s);\\n\\t}\\n}\",\"filename\":\"KillHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet url = 'https://celeaxy.github.io/bitburner/'\\n\\tlet scripts = [];\\n\\tfor(let s of scripts){\\n\\t\\tawait ns.wget(`${url}${s}`, s, 'home');\\n\\t}\\n}\",\"filename\":\"UpdateScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"UpdateScripts.js\",\"url\":\"blob:https://danielyxie.github.io/246f8ff4-7653-44a4-9b9f-b10b78c972dc\",\"moduleSequenceNumber\":4894}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServersSortedByProfit, isMinSecurity, hasMaxMoney, getMostProfitableServer, getAllAvailableThreads, coexec, updatePortData, getPortData, logServerStatus } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getMostProfitableServer(ns);\\n\\tns.tail();\\n\\n\\tawait minimizeSecurity(ns, target);\\n\\n\\tawait maximizeMoney(ns, target);\\n\\n\\tawait prepareHGWThreads(ns, target);\\n\\t// new\\n\\tlet threadsLeft = getAllAvailableThreads(ns);\\n\\tlet targets = getServersSortedByProfit(ns);\\n\\twhile(threadsLeft >= hgwThreads(ns, target, 1)){\\n\\t\\tbreak;\\n\\t}\\n\\t// new\\n\\tawait updatePortData(ns, 20, 'status', 'hgw');\\n}\\n\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function minimizeSecurity(ns, target) {\\n\\twhile (!isMinSecurity(ns, target)) {\\n\\t\\tlet threads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet threadsNeeded = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / ns.weakenAnalyze(1));\\n\\t\\tif (threadsNeeded < threads) threads = threadsNeeded;\\n\\t\\tcoexec(ns, 'Weaken.js', threads, 1.75, '--target', target);\\n\\t\\tawait ns.sleep(ns.getWeakenTime(target) + 200);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function maximizeMoney(ns, target) {\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\tlet ratioGW = ns.weakenAnalyze(1) / ns.growthAnalyzeSecurity(1);\\n\\tlet threadsGrow = maxThreads / (ratioGW + 1) | 0;\\n\\tlet threadsWeaken = Math.ceil(threadsGrow / ratioGW);\\n\\n\\twhile (!hasMaxMoney(ns, target)) {\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet delta = weakenTime - growTime - 200;\\n\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target)));\\n\\t\\tif (threadsNeeded < threadsGrow) {\\n\\t\\t\\tthreadsGrow = threadsNeeded;\\n\\t\\t\\tthreadsWeaken = weakenThreads(ns, 0, threadsGrow);\\n\\t\\t}\\n\\t\\tcoexec(ns, 'Weaken.js', threadsWeaken, 1.75, '--target', target);\\n\\t\\tcoexec(ns, 'Grow.js', threadsGrow, 1.75, '--target', target, '--delay', delta);\\n\\t\\tawait ns.sleep(growTime + 400);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function prepareHGWThreads(ns, target){\\n\\tlet hthreads = 1 / ns.hackAnalyze(target) | 0;\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\n\\twhile (hthreads * ns.hackAnalyze(target) == 1\\n\\t\\t|| hgwThreads(ns, target, hthreads) > maxThreads) {\\n\\t\\ththreads--;\\n\\t}\\n\\n\\tawait updatePortData(ns, 20, 'hgw', {\\n\\t\\t'target': target,\\n\\t\\t'hack': {\\n\\t\\t\\t'time': ns.getHackTime(target),\\n\\t\\t\\t'threads': hthreads\\n\\t\\t},\\n\\t\\t'grow': {\\n\\t\\t\\t'time': ns.getGrowTime(target),\\n\\t\\t\\t'threads': growThreads(ns, target, hthreads)\\n\\t\\t},\\n\\t\\t'weaken': {\\n\\t\\t\\t'time': ns.getWeakenTime(target),\\n\\t\\t\\t'threads': weakenThreads(ns, hthreads, growThreads(ns, target, hthreads))\\n\\t\\t}\\n\\t});\\n\\treturn hgwThreads(ns, target, hthreads);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} hackThreads\\n * **/\\nfunction growThreads(ns, target, hackThreads) {\\n\\treturn Math.ceil(ns.growthAnalyze(target, 1 / (1 - ns.hackAnalyze(target) * hackThreads)));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} hackThreads\\n * \\t@param {Number} growThreads\\n * **/\\nfunction weakenThreads(ns, hackThreads, growThreads) {\\n\\treturn Math.ceil((ns.hackAnalyzeSecurity(hackThreads) + ns.growthAnalyzeSecurity(growThreads)) / ns.weakenAnalyze(1));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} hackThreads\\n * **/\\nfunction hgwThreads(ns, target, hackThreads) {\\n\\tlet h = hackThreads;\\n\\tlet g = growThreads(ns, target, h);\\n\\tlet w = weakenThreads(ns, h, g);\\n\\treturn h + g + w;\\n}\\n\\nasync function minimizeSecurity2(ns, targets){\\n\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} availableThreads\\n * **/\\nfunction hgwBatch(ns, target, availableThreads) {\\n\\tlet hthreads = 1 / ns.hackAnalyze(target) | 0;\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\twhile (hthreads * ns.hackAnalyze(target) == 1\\n\\t\\t|| hgwThreads(ns, target, hthreads) > maxThreads) {\\n\\t\\ththreads--;\\n\\t}\\n\\tlet h = hthreads;\\n\\tlet g = growThreads(ns, target, h);\\n\\tlet w = weakenThreads(ns, h, g);\\n\\n\\treturn {\\n\\t\\t'h':{\\n\\t\\t\\t'threads': h,\\n\\t\\t\\t'time' : ns.getHackTime(target)\\n\\t\\t},\\n\\t\\t'g': {\\n\\t\\t\\t'threads' : g,\\n\\t\\t\\t'time' : ns.getGrowTime(target)\\n\\t\\t},\\n\\t\\t'w':{\\n\\t\\t\\t'threads': w,\\n\\t\\t\\t'time' : ns.getWeakenTime(target)\\n\\t\\t},\\n\\t\\t'threads' : h+g+w\\n\\t};\\n}\\n\\n\\nfunction batches(ns){\\n\\tlet threads = getAllAvailableThreads(ns);\\n\\t\\n}\",\"filename\":\"HGWSetup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/cc3ee15c-3994-491e-9849-23c07a4546af\",\"moduleSequenceNumber\":542},{\"filename\":\"HGWSetup.js\",\"url\":\"blob:https://danielyxie.github.io/a9d0e8e3-1b38-4bb3-b00d-563a63bc2be9\",\"moduleSequenceNumber\":7553}],\"dependents\":[],\"ramUsage\":14.55,\"server\":\"home\",\"moduleSequenceNumber\":7553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getMaxBuyableServerRam, } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\n\\tlet num = () => ns.getPurchasedServers().map(s => parseInt(s.split('-')[1])).reduce((e, n) => e > n ? e : n , 0)+1;\\n\\t\\n\\tlet serverWithLowestRam = () => ns.getPurchasedServers().reduce((e, n) => ns.getServerMaxRam(e) < ns.getServerMaxRam(n) ? e : n);\\n\\tlet ram = () => getMaxBuyableServerRam(ns);\\n\\twhile(ram()){\\n\\t\\tlet n = num();\\n\\t\\tlet r = ram();\\n\\t\\tlet name = `pserv-${n}-${formatRam(r)}`;\\n\\t\\tif(ns.getPurchasedServers().length == ns.getPurchasedServerLimit()){\\n\\t\\t\\tlet lowest = serverWithLowestRam();\\n\\t\\t\\tif(ns.getServerMaxRam(lowest) > r)\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tns.killall(lowest);\\n\\t\\t\\tns.deleteServer(lowest);\\n\\t\\t}\\n\\t\\tns.purchaseServer(name, r);\\n\\t}\\n}\\n\\n/**\\n * @param {Number} ram\\n */\\nfunction formatRam(ram){\\n\\tlet suffix = ['GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n\\tlet r = ram;\\n\\tlet i = 0;\\n\\twhile(r >= 1024){\\n\\t\\tr /= 1024;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${r}${suffix[i]}`;\\n}\",\"filename\":\"PurchaseServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/55b2dd77-a6d1-4e1c-8b62-b604d6421859\",\"moduleSequenceNumber\":542},{\"filename\":\"PurchaseServers.js\",\"url\":\"blob:https://danielyxie.github.io/c2ff10e3-7f47-4117-9002-a06e8ba2b66f\",\"moduleSequenceNumber\":7554}],\"dependents\":[],\"ramUsage\":9.75,\"server\":\"home\",\"moduleSequenceNumber\":7554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.getPurchasedServers());\\n}\",\"filename\":\"MyServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"MyServers.js\",\"url\":\"blob:https://danielyxie.github.io/a2f722ff-a35c-4040-af78-7433c2b4f1b8\",\"moduleSequenceNumber\":1657}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-2-2048\",\"pserv-3-32768\",\"pserv-4-262144\",\"pserv-5-16384\",\"pserv-6-4096\",\"pserv-7-2048\",\"pserv-16-65536\",\"pserv-17-16384\",\"pserv-18-8192\",\"pserv-19-4096\",\"pserv-20-2048\",\"pserv-36-64TB\",\"pserv-37-8TB\",\"pserv-38-4TB\",\"pserv-39-2TB\",\"pserv-42-4TB\",\"pserv-43-2TB\",\"pserv-47-64TB\",\"pserv-48-8TB\",\"pserv-49-4TB\",\"pserv-50-2TB\",\"pserv-51-4TB\",\"pserv-52-2TB\",\"pserv-53-2TB\",\"pserv-54-1TB\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-446010-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,31],[2,7],[4,9],[19,20],[20,28],[21,29],[13,17],[1,3],[25,26],[8,14],[12,20],[4,10],[3,10],[15,19],[22,30],[15,23],[14,16],[3,12],[9,14]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"68.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":559,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"ecorp\",\"moduleSequenceNumber\":560,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"ecorp\",\"moduleSequenceNumber\":561,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":562,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":563,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":564,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37839582844,\"moneyMax\":945989571100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1186,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-597359-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[18,116,135,51,155,123,3,169,60,72,179,110,189,45,191,198,31,105,198,118,82,35,173,39,126,129,67,136,198,114,129,50,82,102,152,167,185],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416538-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,7,0,5,1,0,0,8,8,6,8,5,7,8,7,1,4,5,3,4,1,3,2,7,0],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-799757.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,3,4,8,1,8,5,6,0,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"57.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":565,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"megacorp\",\"moduleSequenceNumber\":566,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"megacorp\",\"moduleSequenceNumber\":567,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":568,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":569,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":570,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49179668269,\"moneyMax\":1229491706725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1120,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"73.8.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":571,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"b-and-a\",\"moduleSequenceNumber\":572,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":573,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":574,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":575,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":576,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":23646126505,\"moneyMax\":591153162625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1000,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-221567.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[1,0,0,1,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"16.3.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":43,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":73,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/5dc21d48-98ba-42be-ad1a-debab9389d7f\",\"moduleSequenceNumber\":3934}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":577,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"blade\",\"moduleSequenceNumber\":578,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"blade\",\"moduleSequenceNumber\":579,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/c49da859-ef10-4ffd-b3cf-a99241b917c9\",\"moduleSequenceNumber\":9110},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/d24ac76a-481f-49f5-8116-2616c664f1a3\",\"moduleSequenceNumber\":24601}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":580,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/4bb56a9a-98d2-4462-a70c-38373aace3d3\",\"moduleSequenceNumber\":7591}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":7591,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/a09b87e2-fb54-4677-8a86-7db3b52310bd\",\"moduleSequenceNumber\":56216},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/60f29cf9-720e-4cbf-9ac7-695426303328\",\"moduleSequenceNumber\":85931}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":582,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":36440692132,\"moneyMax\":911017303300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1193,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-984640-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,8,0,4,0,5,10,1,0,10,5,2,10,0],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"69.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":583,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"nwo\",\"moduleSequenceNumber\":584,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"nwo\",\"moduleSequenceNumber\":585,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":586,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":587,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":588,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22963873479,\"moneyMax\":574096836975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":69}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64252-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[65,59,169,80,123,38,152,167,151,44,112,72,62,133,178,15,175,23,111],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846795.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[69,198,182,200,87],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"59.4.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":589,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"clarkinc\",\"moduleSequenceNumber\":590,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":591,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":592,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":593,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":594,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":21812943422,\"moneyMax\":545323585550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1129,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"64.1.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":38,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":73,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/2cc83e64-5e4f-4f98-94de-464a9f9d969e\",\"moduleSequenceNumber\":3929}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":595,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"omnitek\",\"moduleSequenceNumber\":596,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"omnitek\",\"moduleSequenceNumber\":597,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/f6825e09-a6ff-4773-8457-4596303e38bd\",\"moduleSequenceNumber\":9095},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/673cfa9f-2767-4919-a1f2-ac352620711e\",\"moduleSequenceNumber\":24596}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":598,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/cb6cff95-68e3-4118-9528-24141e358beb\",\"moduleSequenceNumber\":7586}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":7586,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/67eeed2b-e78d-45ae-872d-48418d2e76cf\",\"moduleSequenceNumber\":56201},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/611d4adf-9146-48bb-ac01-395082bb615f\",\"moduleSequenceNumber\":85926}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":600,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":17049200246,\"moneyMax\":426230006150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1087,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-122161-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,0,5,1,0,2,0],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"32.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":601,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"4sigma\",\"moduleSequenceNumber\":602,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"4sigma\",\"moduleSequenceNumber\":603,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":604,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":605,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":606,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":21892362663,\"moneyMax\":547309066575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1051,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-636055-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[1,95,88,70,99,127,50,9,199,80,61,37,69,63,187,48,88,185,37,130,126,122,164,118,164,46,162,139,108,143],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"14.8.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":607,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":608,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":609,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":610,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":611,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":612,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":26575629806,\"moneyMax\":664390745150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":991,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763166-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[50],[49],[23],[25],[28],[41],[12],[44],[10],[4],[14],[50],[33],[14],[27]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"14.3.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":33,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":585,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/6153eaa5-d5c2-415e-b8f4-8bb824bb7940\",\"moduleSequenceNumber\":1754}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":613,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":614,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":615,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":616,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/d9b3da0f-a6ba-44c8-8260-9a2e0a58d17d\",\"moduleSequenceNumber\":7581}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":7581,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/370d7f53-30ea-4bc2-9d63-154b23b3be2c\",\"moduleSequenceNumber\":3923}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":618,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1561355277,\"moneyMax\":39033881925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1077,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"29.5.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":619,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":620,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":621,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":622,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":623,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":624,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1287,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-278157-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[9,1],[2,6,4],[9,3,1,4],[9,4,2,1,6],[8,7,4,9,3,2],[1,3,4,2,6,8,5],[7,5,9,2,9,5,7,6],[1,5,2,8,6,3,9,1,2],[3,2,7,1,7,8,6,5,2,6],[4,1,1,5,2,9,5,4,6,9,2]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-536499-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":62041831,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"44.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":625,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"stormtech\",\"moduleSequenceNumber\":626,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"stormtech\",\"moduleSequenceNumber\":627,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":628,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":629,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":630,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1102223593,\"moneyMax\":27555589825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1022,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"64.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":631,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"defcomm\",\"moduleSequenceNumber\":632,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"defcomm\",\"moduleSequenceNumber\":633,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":634,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":635,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":636,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":864794112,\"moneyMax\":21619852800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":948,\"serverGrowth\":67}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106083-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[22,63,146,98],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"33.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":637,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"infocomm\",\"moduleSequenceNumber\":638,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"infocomm\",\"moduleSequenceNumber\":639,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":640,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":641,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":642,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":608842153,\"moneyMax\":15221053825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":930,\"serverGrowth\":67}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424849-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-3,7,7,-1,9,0,-1,-3,1,-1,-4,10,10,-2,8,9,4,-1,-2,-3,-7,8,-2,8,7,-8,5,-3,-2,0,6,0,5,-8,-10,-9,-7,2,1],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325087-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":5717836,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"27.2.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":34,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":36,\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/3c56368a-00da-42e0-8a27-3c3a48ffe0d0\",\"moduleSequenceNumber\":604},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/c576a5da-2028-4fea-98c5-6dd12988e2a3\",\"moduleSequenceNumber\":13073}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":643,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"helios\",\"moduleSequenceNumber\":644,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"helios\",\"moduleSequenceNumber\":645,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/558817b3-7343-4ee0-b7a9-21e930dc7c73\",\"moduleSequenceNumber\":9089},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/13d8d381-d344-481a-87f1-47b24c588acc\",\"moduleSequenceNumber\":24592}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":646,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/130b16b5-2141-4a20-996b-4bcdfce6e421\",\"moduleSequenceNumber\":7582}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":7582,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f7d10de6-0fee-45dd-a7b0-0a8f007f8716\",\"moduleSequenceNumber\":3924}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":648,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":620287052,\"moneyMax\":15507176300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"74.1.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":37,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/1243bb18-3634-4c20-a43c-2f7d97bc881b\",\"moduleSequenceNumber\":3928}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":649,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"vitalife\",\"moduleSequenceNumber\":650,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"vitalife\",\"moduleSequenceNumber\":651,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/bcd2ddbd-f577-4306-8e0e-72b108baa065\",\"moduleSequenceNumber\":9094},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/b5dd0b77-9679-47e3-8d8f-0256dc916af7\",\"moduleSequenceNumber\":24595}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":652,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/111c7dcd-43c0-4593-8a55-fcd99467a5c0\",\"moduleSequenceNumber\":7585}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":7585,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/3d8e3ddd-33c1-4c6e-8236-1c3401307d31\",\"moduleSequenceNumber\":56200},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/3dbcd089-4eda-4814-9923-6cf45bc8e9ce\",\"moduleSequenceNumber\":85925}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":654,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":794339286,\"moneyMax\":19858482150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":780,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"67.3.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":655,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"icarus\",\"moduleSequenceNumber\":656,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"icarus\",\"moduleSequenceNumber\":657,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":658,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":659,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":660,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":901116038,\"moneyMax\":22527900950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"13.8.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":42,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":9,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/ba03aa53-bfc4-4eb0-a7c4-61a7cde9f0cc\",\"moduleSequenceNumber\":3933}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":661,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"univ-energy\",\"moduleSequenceNumber\":662,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":663,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/c3786c56-5fb9-44cf-85d7-6cfb75495260\",\"moduleSequenceNumber\":9105},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/995b7dd4-1e3b-4e3f-a07a-529c6aee6180\",\"moduleSequenceNumber\":24600}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":664,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/30f891bf-c29e-4d0c-9dd5-37c17afddd1f\",\"moduleSequenceNumber\":7590}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":7590,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/10b7e8a8-4886-4bff-b9c4-50628951392f\",\"moduleSequenceNumber\":56211},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/284fda21-9d11-4273-b8cd-10aedcb8699d\",\"moduleSequenceNumber\":85930}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":666,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1111219583,\"moneyMax\":27780489575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639195-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2604231\",96],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"70.7.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":36,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":18,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/2687fb81-d94c-4d78-bb06-ac891ccd6451\",\"moduleSequenceNumber\":3927}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":667,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"titan-labs\",\"moduleSequenceNumber\":668,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":669,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/56442c39-8488-4468-ba86-c571c8e993e4\",\"moduleSequenceNumber\":9093},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/9c3ee519-1192-4528-8731-127438dcaa3f\",\"moduleSequenceNumber\":24594}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":670,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/2cc8e8e1-8e10-4469-9ddb-d3d0aba1b1cc\",\"moduleSequenceNumber\":7584}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":7584,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/7a15de68-2daf-42ee-bfeb-3c5f8234bfef\",\"moduleSequenceNumber\":56199},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/52c6da6e-f2a8-43e6-bc67-35b1a1814f39\",\"moduleSequenceNumber\":85924}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":672,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":831444144,\"moneyMax\":20786103600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"42.8.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":32,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/47066553-19b1-428a-89e7-c5a33455c8c4\",\"moduleSequenceNumber\":1753}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":673,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"microdyne\",\"moduleSequenceNumber\":674,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"microdyne\",\"moduleSequenceNumber\":675,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":676,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/5ba11a5e-77e8-442f-bff2-8f6c6cccbfc3\",\"moduleSequenceNumber\":7580}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":7580,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bf1ac907-8509-4c0a-bee9-a79d70c37b14\",\"moduleSequenceNumber\":7759}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":678,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":690144867,\"moneyMax\":17253621675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-609900-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[57,61,107,191],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"91.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":679,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":680,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":681,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":682,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":683,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":684,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":830645948,\"moneyMax\":20766148700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":936,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"9.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":685,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":686,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":687,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":688,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":689,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":690,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":758908662,\"moneyMax\":18972716550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-339129-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,6,0,0,4,0,4,9,2,0,0,9,5],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"14.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":691,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"aerocorp\",\"moduleSequenceNumber\":692,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":693,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":694,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":695,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":696,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1056703241,\"moneyMax\":26417581025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247765.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[1,4],[1,4,4],[6,6,6,6]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555037-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,2],[12,13],[23,32],[8,14],[9,15],[6,12],[6,14],[13,17],[5,15],[16,22],[14,18],[19,26],[4,6],[19,23],[14,23],[5,10]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"96.3.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":47,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/46763279-96f0-49bb-9592-219ae46f6935\",\"moduleSequenceNumber\":3938}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":697,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"omnia\",\"moduleSequenceNumber\":698,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"omnia\",\"moduleSequenceNumber\":699,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/7e390004-430e-44bd-b09a-d43b1cf20932\",\"moduleSequenceNumber\":9118},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/52d1e02f-e0a7-45b8-a08c-cc7851e65e17\",\"moduleSequenceNumber\":24605}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":700,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/10f86c27-6091-4e36-85c6-2bd58b1f09f2\",\"moduleSequenceNumber\":7595}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":7595,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/94548919-985b-474b-9a18-6cae1cee4d77\",\"moduleSequenceNumber\":56224},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5c6649d4-091b-410b-a063-af1f6413147e\",\"moduleSequenceNumber\":85935}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":702,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":977633189,\"moneyMax\":24440829725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917891.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[72,140,150,191,115,26,105,104,120,151,179,140,47,32,4,87,110,75,174,133,101,75,78,5,109,51,102],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"84.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":703,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"zb-def\",\"moduleSequenceNumber\":704,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zb-def\",\"moduleSequenceNumber\":705,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":706,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":707,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":708,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":1031972883,\"moneyMax\":25799322075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":785,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-462355-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":62,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346953-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a()()a())\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-972063-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a))())a((()()a))((\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"6.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":709,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":710,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":711,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":712,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":713,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":714,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":923645202,\"moneyMax\":23091130050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437642-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,11],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-643070-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,4],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"57.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":48,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":18,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/d5e04ffa-ed0e-4371-aba7-b8add60bdf49\",\"moduleSequenceNumber\":3939}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":715,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"solaris\",\"moduleSequenceNumber\":716,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"solaris\",\"moduleSequenceNumber\":717,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/7cd68c16-612e-4285-89cb-ab13f9efebd7\",\"moduleSequenceNumber\":9119},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/1d9c048f-5750-4526-be22-f2f9bb5348ee\",\"moduleSequenceNumber\":24606}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":718,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/7e81a519-ca42-454c-a907-39919ea31a5d\",\"moduleSequenceNumber\":7596}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":7596,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/c07d3b7e-286d-41d7-ac44-c82c211ea110\",\"moduleSequenceNumber\":56225},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1299362e-b30c-4ee8-a398-0a0d87b9f470\",\"moduleSequenceNumber\":85936}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":720,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":741259464,\"moneyMax\":18531486600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"9.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":721,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"deltaone\",\"moduleSequenceNumber\":722,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"deltaone\",\"moduleSequenceNumber\":723,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":724,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":725,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":726,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1493571750,\"moneyMax\":37339293750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134341-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())((a(a(()((a\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-192099-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[34,158,111,2,46,108,66,29,146,139,129,63,116,81,17,56,127,46,48,122,89,180,138,21,14,4,30,81,198,198,154,38,103,161,97,128,107,30,195,76,142,160,162],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"50.1.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":46,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/2ccd7827-7d10-448a-af57-afccb24dfbc1\",\"moduleSequenceNumber\":3937}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":727,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"global-pharm\",\"moduleSequenceNumber\":728,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":729,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/23dd7ed0-46e8-4db5-86b5-a9b43cc0a5de\",\"moduleSequenceNumber\":9117},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/04d4a9bf-a508-4791-a769-f0528ee87ce6\",\"moduleSequenceNumber\":24604}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":730,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/21c32096-445e-4e93-ad8d-520ade7f01c9\",\"moduleSequenceNumber\":7594}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":7594,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/182eb2bb-5a3e-494c-81e2-a03b86c0159f\",\"moduleSequenceNumber\":56223},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9c83a794-8280-40f8-a045-c7c354304af4\",\"moduleSequenceNumber\":85934}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":732,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1634388057,\"moneyMax\":40859701425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":799,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"69.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":733,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"nova-med\",\"moduleSequenceNumber\":734,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"nova-med\",\"moduleSequenceNumber\":735,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":736,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":737,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":738,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1209269765,\"moneyMax\":30231744125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571857.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[88,77,57,141,57,3,33,4,189,192,37,61,69,116,159,59,111,60,1,117,182,166,184,29,23,11,117,3,14]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"0.6.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":739,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"zeus-med\",\"moduleSequenceNumber\":740,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":741,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":742,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":743,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":744,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1402327683,\"moneyMax\":35058192075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263129.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[1,6],[6,7,5],[6,7,1,3],[7,9,2,7,3],[2,7,2,3,1,8],[6,5,3,2,5,1,5],[2,7,8,5,8,8,1,8],[4,7,1,1,3,6,7,8,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73377-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,25],[7,12],[17,18],[14,17],[16,26],[21,31],[4,12],[1,11],[15,22],[21,26],[8,12],[19,23],[11,18],[24,26],[3,4],[1,8],[11,21],[16,25],[8,14],[20,30]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-635144.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,12],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"68.3.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":41,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":18,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/e979f547-7de7-46ce-9caf-fe3735fc3f82\",\"moduleSequenceNumber\":3932}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":745,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"unitalife\",\"moduleSequenceNumber\":746,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"unitalife\",\"moduleSequenceNumber\":747,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/892ab9cd-39e8-4f14-9778-b53a696190b0\",\"moduleSequenceNumber\":9104},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/026e627b-cd8e-4136-ba0d-cdffc14a5903\",\"moduleSequenceNumber\":24599}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":748,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/b7d74036-b37e-43c2-99eb-fac833814bf3\",\"moduleSequenceNumber\":7589}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":7589,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/d95b15df-4217-4394-9057-39a594ec619a\",\"moduleSequenceNumber\":56210},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/037cfb6b-a0f5-4207-8212-ea7e503d2b41\",\"moduleSequenceNumber\":85929}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":750,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1047434294,\"moneyMax\":26185857350,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":784,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-580361-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":81,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594598.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"20.0.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":29,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":12,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/86f23730-6b3e-49c2-b884-306164a86a26\",\"moduleSequenceNumber\":7757}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":30,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":6,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/9cb69294-8f28-491e-bd48-f553d2a3ac21\",\"moduleSequenceNumber\":1751}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":751,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":752,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":753,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":754,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/01793502-affc-4f36-9f7f-f15b849e3bd4\",\"moduleSequenceNumber\":7578}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":7578,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/efc4045a-a9b3-4c6a-be49-7aed56fa9826\",\"moduleSequenceNumber\":7577}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":7577,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":742209320,\"moneyMax\":18555233000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":699,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-741992-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,1,-3,-2,4,-3,-5,5,10,3,-3,-1,3,-2,4,2,6,-10,-2,1,1,4,-7,-3,2,8,6,-6,-9,-2,10,6,-7,2,7,10,-3,-6,2],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-2705-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1],[0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-596023.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"96.1.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":31,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/07033111-a759-4875-a687-e199b4b364b7\",\"moduleSequenceNumber\":1752}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":757,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"rho-construction\",\"moduleSequenceNumber\":758,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":759,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":760,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/a12999eb-a5ac-4526-9cf2-a64425ebcef8\",\"moduleSequenceNumber\":7579}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":7579,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e58363f6-cdcb-42f4-a466-ddd2c7863a09\",\"moduleSequenceNumber\":7758}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":762,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":639798074,\"moneyMax\":15994951850,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":522,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"18.5.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":45,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":18,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/c1201cd8-2d06-457f-8953-929876a17802\",\"moduleSequenceNumber\":3936}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":763,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":764,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":765,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/ce0e371c-29dd-44a1-9d20-98d441586641\",\"moduleSequenceNumber\":9116},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/02f2a238-e4d1-4fbd-b249-de00a49ac3ca\",\"moduleSequenceNumber\":24603}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":766,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/13b7fdc7-da39-4358-9104-d9306eadc441\",\"moduleSequenceNumber\":7593}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":7593,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/112b03d3-451c-4f9e-a302-ab4b0ef8ba3e\",\"moduleSequenceNumber\":56222},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c6856e15-c710-4a72-b934-f34e7646ace5\",\"moduleSequenceNumber\":85933}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":768,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":624060594,\"moneyMax\":15601514850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":569,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737369-AlphaEnterprises.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"8799103150\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"32.4.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":49,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/1d186581-fa7a-4318-a610-3af547320fcc\",\"moduleSequenceNumber\":3940}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":769,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"aevum-police\",\"moduleSequenceNumber\":770,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":771,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2c4a086a-8bc1-4f8c-bbdb-acef05eb87ca\",\"moduleSequenceNumber\":9120},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/2a5a02b1-acd0-4130-a37d-9dbe70591507\",\"moduleSequenceNumber\":24607}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":772,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/63e41050-e4c4-455d-a75e-9a7471fbfd9f\",\"moduleSequenceNumber\":7597}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":7597,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/65f01b7e-48e7-4d6d-a56e-b1542433a3e5\",\"moduleSequenceNumber\":56226},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a112ed49-fb97-4ef3-859c-6e91ec101010\",\"moduleSequenceNumber\":85937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":774,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":296277591,\"moneyMax\":7406939775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":439,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"67.9.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":18,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9a100243-9dc6-4991-a300-2bb897ccd2bb\",\"moduleSequenceNumber\":3274}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":775,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":776,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":777,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":778,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/cc8fc6ff-0a65-4b7f-9a16-f44be081f183\",\"moduleSequenceNumber\":1740}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":779,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1025ebd4-0f2c-48ba-846b-0b6e6495b530\",\"moduleSequenceNumber\":7566}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":7566,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":227688241,\"moneyMax\":5692206025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":392,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-845035-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[8,3],[3,3,7],[3,2,7,6],[9,5,8,8,8]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146778.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"73.8.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":44,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/6ae94d4d-3c7c-4d10-ae7e-5202d0c6f88a\",\"moduleSequenceNumber\":3935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":781,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"zb-institute\",\"moduleSequenceNumber\":782,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":783,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/36533977-f169-4056-bb1a-2f843a85e739\",\"moduleSequenceNumber\":9115},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/7bdf2b3d-cd34-4a7d-a832-cd23220c6863\",\"moduleSequenceNumber\":24602}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":784,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/02bb48a2-4bfe-4eeb-a6a4-2f04d4564c7d\",\"moduleSequenceNumber\":7592}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":7592,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/35134d31-8a85-41fc-a908-5e1f3722765f\",\"moduleSequenceNumber\":56221},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0e07c3b-28ec-4385-9fcb-869f9d80ce60\",\"moduleSequenceNumber\":85932}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":786,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":882598052,\"moneyMax\":22064951300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128207-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[4,3],[7,5,1]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-309991.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,4,7,0,7,0,2,3,0,10,1,0,10,5,0,3,10,0,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"50.6.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":28,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9a0fe834-c398-4856-a10f-5eb3a9c2bf30\",\"moduleSequenceNumber\":7756}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":787,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"summit-uni\",\"moduleSequenceNumber\":788,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":789,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":790,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/c92249ec-87e9-4d00-a078-5e7f18860007\",\"moduleSequenceNumber\":1750}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":791,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8e6b2ede-856e-445c-9c31-86a5f71db44a\",\"moduleSequenceNumber\":7576}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":7576,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":259291221,\"moneyMax\":6482280525,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":442,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431301-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,1,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,1,1,1,0,1,0,0,0,0],[0,0,0,0,0,0,1,1,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"8.9.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":793,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"syscore\",\"moduleSequenceNumber\":794,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"syscore\",\"moduleSequenceNumber\":795,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":796,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":797,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":798,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":571353257,\"moneyMax\":14283831425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":589,\"serverGrowth\":67}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-423050-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":523313126,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-342968.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"993723413077\",16],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"48.9.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":51,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/38b403a3-aee0-45f7-99fc-42221dcfbbb1\",\"moduleSequenceNumber\":3942}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":799,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"catalyst\",\"moduleSequenceNumber\":800,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"catalyst\",\"moduleSequenceNumber\":801,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/d2cb4d4b-65e6-4522-8fa4-aa587ae2b49f\",\"moduleSequenceNumber\":9123},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/fbeb235a-1f9e-483e-ad31-823f98de0e6b\",\"moduleSequenceNumber\":24609}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":802,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a81aae8-4a63-4897-a02b-e060cb9e225d\",\"moduleSequenceNumber\":7599}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":7599,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/d6adaa57-1408-4c21-85cc-7fdf9c77494f\",\"moduleSequenceNumber\":712},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ebb295e5-f6b0-401b-a1c8-4f3e486e8578\",\"moduleSequenceNumber\":910}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":804,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":544193703,\"moneyMax\":13604842575,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":403,\"serverGrowth\":33}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590817-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,8,0,-1,-5,10,9,0,0,7,5,-5,6,-3,4,-6,-3],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"93.7.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":17,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":36,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a4c1587b-07b2-40a5-9592-9baf695051d4\",\"moduleSequenceNumber\":3273}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":805,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"the-hub\",\"moduleSequenceNumber\":806,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"the-hub\",\"moduleSequenceNumber\":807,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":808,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/326f94f3-1a33-480a-af25-349d44352725\",\"moduleSequenceNumber\":1739}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":809,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0c5dd367-2912-4d1d-b77f-001b913c13b1\",\"moduleSequenceNumber\":7565}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":7565,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":61.379999999999995,\"minDifficulty\":13,\"moneyAvailable\":9811535.560360834,\"moneyMax\":4383583825,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":304,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-405654.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,1],[0,0],[0,1],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-144244.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[2,7],[6,5,4],[2,2,2,5],[4,3,7,3,3],[7,9,3,3,7,2],[9,4,1,3,1,5,4],[1,5,1,3,1,3,7,8],[1,4,4,8,6,3,5,9,9],[9,8,3,8,9,8,8,2,5,1],[6,4,4,6,9,4,6,3,9,3,1],[4,7,7,3,5,3,4,4,8,3,1,2]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"7.7.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":811,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"comptek\",\"moduleSequenceNumber\":812,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"comptek\",\"moduleSequenceNumber\":813,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":814,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":815,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":816,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":239844409,\"moneyMax\":5996110225,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":398,\"serverGrowth\":48}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"35.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":11,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c1a01d0b-a26a-4462-ad17-1c6437ae6e7f\",\"moduleSequenceNumber\":1732}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":817,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"netlink\",\"moduleSequenceNumber\":818,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"netlink\",\"moduleSequenceNumber\":819,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":820,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/2d58c3b7-2d57-47ee-b945-48d636b511cf\",\"moduleSequenceNumber\":5572}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":821,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8505d14b-3a5c-4055-8ffc-01bddeec85de\",\"moduleSequenceNumber\":7559}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":7559,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":411,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-40049-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))(a((a)))\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"44.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":823,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":824,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":825,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":826,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":827,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":828,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":1825326500,\"moneyMax\":1825326500,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":287,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-380099.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[88,95,55,165,132,105,7,118,49,44,77,60,29,193,3,97,130,168,109,200,25,149,176,168,46,139,74,13,161,12,76,123,197,111,173,192,88,127,31,28,146,11],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340870-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[53,84,171,91,193,48,19,1,131,2,49,16,142,183,165,140,187,42,112,89,159,60,44,82,147,104,17,146,6,138,17,178,183,116,10,56,71,10,85,171,66,100,149,36],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-618753-AlphaEnterprises.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23732234101\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"29.4.6.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":8,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8e545da6-67d3-4c35-b552-7a7e05340694\",\"moduleSequenceNumber\":1729}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":829,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"n00dles\",\"moduleSequenceNumber\":830,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"n00dles\",\"moduleSequenceNumber\":831,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/40955638-23fc-4fb7-8550-e1f8af8061cb\",\"moduleSequenceNumber\":29949},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/8cedc4e3-9f79-4657-a202-762129bd4d96\",\"moduleSequenceNumber\":44530}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":832,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/92537806-df19-4e5c-b7da-139b01a9abfd\",\"moduleSequenceNumber\":9055},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/6067fbe2-0128-4c24-8da8-165b9af11e39\",\"moduleSequenceNumber\":27361}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":833,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/62788b7f-7e03-474c-8236-fa3e318fe9ed\",\"moduleSequenceNumber\":7556}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":7556,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.01,\"minDifficulty\":1,\"moneyAvailable\":1561153.7760782884,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-641256-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":891001507,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"96.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":12,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4bc0e088-739f-4ee7-93d1-f1a3b11cc0f1\",\"moduleSequenceNumber\":1733}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":835,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":836,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":837,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/35b3027a-1446-4ebf-aff2-99938ac2e5b2\",\"moduleSequenceNumber\":29953},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/cf3cc84f-e71d-4138-ba91-13be37ecb7e7\",\"moduleSequenceNumber\":44531}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":838,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/0e3543ce-95a2-4ea2-96eb-37e3064fd1a2\",\"moduleSequenceNumber\":5573}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":839,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/72a2f640-7a0b-4c95-828f-a33dcc6e3a0e\",\"moduleSequenceNumber\":7560}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":7560,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":78.292,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105521-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[40,96,115,39,2,71,62,8,32,191,145,42,199,128,9,37,38,92,30,161,187,133,72,65,187,77,48],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"80.8.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":14,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6db75626-69c0-4e56-af67-a56bb14f9400\",\"moduleSequenceNumber\":1735}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":841,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":842,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":843,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/f9f415c4-403b-4b3c-9bbd-55929548fbf1\",\"moduleSequenceNumber\":29955},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/be764af2-86d4-4633-aa56-48500a284758\",\"moduleSequenceNumber\":44533}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":844,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/0499a6f7-bcca-48a1-a6ee-67a929251ff8\",\"moduleSequenceNumber\":5575}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":845,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2badccca-41d1-4ba6-a0f3-ca3d40c94bcd\",\"moduleSequenceNumber\":7562}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":7562,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790461.cct\",\"type\":\"Total Ways to Sum\",\"data\":36,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"52.3.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":21,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/331b9567-679c-4505-818f-021a77fdc62c\",\"moduleSequenceNumber\":7749}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":847,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"joesguns\",\"moduleSequenceNumber\":848,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"joesguns\",\"moduleSequenceNumber\":849,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/947f86f6-ef6f-46ef-a81b-b71dff651bd0\",\"moduleSequenceNumber\":29963},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/fc7290d5-c998-43bf-a9c6-c75e155daf3b\",\"moduleSequenceNumber\":44534}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":850,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/3a00ea08-775e-4a3a-8310-3b3b4f82589f\",\"moduleSequenceNumber\":1743}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":851,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/137e6b60-41e3-48cc-ad87-a9cdf4821135\",\"moduleSequenceNumber\":7569}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":7569,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":7.167999999999988,\"minDifficulty\":5,\"moneyAvailable\":1836071.3623970714,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"41.7.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":25,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fbe5b206-05be-4a56-b7a9-40e0911fa284\",\"moduleSequenceNumber\":7753}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":853,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"zer0\",\"moduleSequenceNumber\":854,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zer0\",\"moduleSequenceNumber\":855,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":856,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/0c0d69ee-6232-4a86-aabe-277e3a922d46\",\"moduleSequenceNumber\":1747}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":857,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/59036800-b884-4099-be38-fc75115395d7\",\"moduleSequenceNumber\":7573}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":7573,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-497511.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":126205991,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"23.9.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":13,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/98ba02e8-8679-453a-b7e7-937827c585d0\",\"moduleSequenceNumber\":1734}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":859,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"nectar-net\",\"moduleSequenceNumber\":860,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":861,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/98e9eaea-0d91-4e28-bd8b-67b81172bc9c\",\"moduleSequenceNumber\":29954},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/2c10d7bc-a3af-4d11-8ad9-aca24c07942b\",\"moduleSequenceNumber\":44532}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":862,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/0af5e969-e5b2-4303-8477-21a363a6d265\",\"moduleSequenceNumber\":5574}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":863,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e4b889a3-c0df-46aa-bafd-cdc77c6fd5f9\",\"moduleSequenceNumber\":7561}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":7561,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-839918.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[54,15,72,175,37,55,167,176,29,3,108,93,166,171,20,200,35,13,20,188,92,45,98,56],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"8.2.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":16,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c59d4f59-8d53-45be-8241-bdbf270f75ee\",\"moduleSequenceNumber\":1737}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":865,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"neo-net\",\"moduleSequenceNumber\":866,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"neo-net\",\"moduleSequenceNumber\":867,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":868,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/cb0a5a8c-6c10-4b57-a650-d2e597a8a498\",\"moduleSequenceNumber\":1738}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":869,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bec1da09-845d-46d5-a6b0-7ab38e0bc795\",\"moduleSequenceNumber\":7564}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":7564,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66182.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,1,0,0],[1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"90.3.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":26,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b70fe13a-7593-44a2-8bbc-31a455537487\",\"moduleSequenceNumber\":7754}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":871,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"silver-helix\",\"moduleSequenceNumber\":872,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":873,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":874,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/65002bef-e7c0-4e3e-891f-af93ae5f2369\",\"moduleSequenceNumber\":1748}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":875,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d5857213-b35d-4d11-a344-ef2bc99f1db7\",\"moduleSequenceNumber\":7574}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":7574,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"28.9.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":22,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c6f457cb-6d74-4b46-a444-d1c27ec6b3bb\",\"moduleSequenceNumber\":7750}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":877,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":878,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":879,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/e492dd67-0d11-4b48-8708-76ddc1606165\",\"moduleSequenceNumber\":29964},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/e4d74094-f4c9-400d-80cf-9fcbb6f43695\",\"moduleSequenceNumber\":44535}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":880,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/d84b021f-724c-4b93-962a-d07c12719651\",\"moduleSequenceNumber\":1744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":881,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/420e1108-e377-44cb-97ed-9db1b2dc7f8c\",\"moduleSequenceNumber\":7570}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":7570,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871206-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((aa((\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259797-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[1,9],[7,5,6],[4,3,8,8],[3,5,4,6,1],[3,2,9,6,7,5],[1,1,3,6,6,1,9],[3,1,6,3,6,4,3,4],[1,6,1,4,6,4,8,7,4]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656569.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"94240147176\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"92.4.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":23,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/63c55a28-3c6e-421a-bfbc-6f63a14b7b3a\",\"moduleSequenceNumber\":7751}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":883,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":884,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":885,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/971199be-df79-45e3-9552-047c4a5bede8\",\"moduleSequenceNumber\":29965},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/0a594f9a-ba0b-4737-99c1-4437c8d82ab7\",\"moduleSequenceNumber\":44536}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":886,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/79f1c643-4bec-49b1-9c1a-b52cc52c982b\",\"moduleSequenceNumber\":1745}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":887,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/886f6da6-056d-4529-b344-1f698b892d70\",\"moduleSequenceNumber\":7571}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":7571,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.848000000000004,\"minDifficulty\":5,\"moneyAvailable\":20173745.560336076,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-935119.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())))(a((((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"72.2.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":27,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/35b163ad-434e-44d9-b967-a90af0091238\",\"moduleSequenceNumber\":7755}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":889,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"phantasy\",\"moduleSequenceNumber\":890,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"phantasy\",\"moduleSequenceNumber\":891,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":892,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/1b3d24d2-d050-4c9f-8b41-013ca13a232f\",\"moduleSequenceNumber\":1749}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":893,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2943fadb-60e2-418b-a28d-3fb189099655\",\"moduleSequenceNumber\":7575}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":7575,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571063.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[164,111,96,61,150,49,80,94,96,162,47,38,143,177],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994768-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,11],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-919559-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,24],[1,4],[19,21],[5,15],[20,30],[20,28],[17,23],[10,13],[2,6],[14,19],[21,22],[7,12],[2,5]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"57.1.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":15,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ef6dd257-78cb-4261-9cfe-8119425f269b\",\"moduleSequenceNumber\":1736}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":895,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"max-hardware\",\"moduleSequenceNumber\":896,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":897,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":898,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/e6f0f3df-2ded-4477-a6f2-62844c4e9625\",\"moduleSequenceNumber\":5576}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":899,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/58954b82-c728-45a3-9737-21765de2ee25\",\"moduleSequenceNumber\":7563}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":7563,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-902860-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,-5,-2,5,-10,-10,0,-8],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"0.9.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":10,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e25d84a8-4e46-4f1d-b95e-152936e0de3a\",\"moduleSequenceNumber\":1731}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":901,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"omega-net\",\"moduleSequenceNumber\":902,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"omega-net\",\"moduleSequenceNumber\":903,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":904,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/b07f5a36-35cf-4926-855d-ed92c298943e\",\"moduleSequenceNumber\":5571}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":905,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/40cd989e-f760-47b1-b900-6430b49f967f\",\"moduleSequenceNumber\":7558}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":7558,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1692998775,\"moneyMax\":1692998775,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":185,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-887452.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,1,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-539214.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":404001551,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"40.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":907,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":908,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":909,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":910,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":911,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":912,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":55639245,\"moneyMax\":1390981125,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":237,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"38.9.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":24,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/58ff2f01-a61d-4d0d-8c3d-131d11789b31\",\"moduleSequenceNumber\":7752}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":913,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"iron-gym\",\"moduleSequenceNumber\":914,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":915,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/5f21209c-a4fe-4be1-905f-4721c41d7bca\",\"moduleSequenceNumber\":29966},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/e4fed163-7361-432d-aef5-d4c86d4cb6ee\",\"moduleSequenceNumber\":44537}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":916,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/e4a3d92b-2608-4ed0-9031-a541ae2fb7be\",\"moduleSequenceNumber\":1746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":917,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6d5524c0-5935-4440-9d98-b76c23d8e09b\",\"moduleSequenceNumber\":7572}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":7572,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":52.34999999999998,\"minDifficulty\":10,\"moneyAvailable\":1306033.867891682,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-470157-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,12],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-948902.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2332\",-52],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"37.2.2.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":19,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":146,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/749e1616-eff5-4357-adb5-4abdcf606319\",\"moduleSequenceNumber\":7747}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":919,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":920,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":921,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":922,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/29f8558d-9df7-4a2a-a960-72a78106004d\",\"moduleSequenceNumber\":1741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":923,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/55a18447-b298-46d7-8eee-6e2937f06d75\",\"moduleSequenceNumber\":7567}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":7567,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":478,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52581-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[172,124,4,95,127,45,187,83,177,52,28],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"71.2.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":39,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":18,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/12dbd9c3-4d85-4317-8ecf-31598b44e3e5\",\"moduleSequenceNumber\":3930}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":925,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":926,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":927,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/b43a1e12-e9a1-42e7-8c70-a6119603217f\",\"moduleSequenceNumber\":9099},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/faf32508-33bd-4aa9-bb9e-8f915b1fcdf8\",\"moduleSequenceNumber\":24597}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":928,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/24bfff67-265f-4b3e-b0ff-ae41c99e19ff\",\"moduleSequenceNumber\":7587}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":7587,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/8f386f1a-9aa0-4c02-9f29-228170951a69\",\"moduleSequenceNumber\":56205},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/50d07475-f6da-4f8f-9a52-16b750e6c2e2\",\"moduleSequenceNumber\":85927}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":930,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":970,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-953929.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,9,-6,8,7,-4,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"83.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":931,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":932,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":933,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":934,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":935,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":936,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":726,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51114.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,9,7,4,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"97.4.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":35,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":146,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/f10a9e5b-2056-4ad7-a0f3-76cb92e25859\",\"moduleSequenceNumber\":3926}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":937,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":938,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":939,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/db216bde-5603-4b44-ac9c-4e9e63280955\",\"moduleSequenceNumber\":9090},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/84c82100-6388-4fd2-b1f2-45a5547d6597\",\"moduleSequenceNumber\":24593}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":940,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/042f7630-2557-4f30-8b0d-45181532163c\",\"moduleSequenceNumber\":7583}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":7583,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d41b2c88-ab5c-4b3e-a481-aa5e00d8fd85\",\"moduleSequenceNumber\":3925}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":942,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":523,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-528362.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[7,7],[8,1,6],[2,1,6,7],[3,8,7,4,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"81.8.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":20,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":146,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/243ce666-561c-4150-86c1-20e8a214af3c\",\"moduleSequenceNumber\":7748}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":943,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":944,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":945,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":946,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/8731d9e2-cfa2-4814-bb70-de904c3feefd\",\"moduleSequenceNumber\":1742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":947,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f0fec7e1-1b5e-4b87-b1ba-16c90bfe7202\",\"moduleSequenceNumber\":7568}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":7568,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":345,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-556675-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a()a)a(((()a)aa(\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"67.4.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":50,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":36,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/da220798-91a8-4b97-91fd-244578f57e62\",\"moduleSequenceNumber\":3941}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":949,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":950,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":951,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/efbeca19-4b20-4ac2-924e-caf955282d1b\",\"moduleSequenceNumber\":9122},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/5a3212c4-8618-4140-ae0c-0482f21016ef\",\"moduleSequenceNumber\":24608}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":952,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/da03740a-e2e2-42fe-835b-831e39327807\",\"moduleSequenceNumber\":7598}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":7598,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/a641b2fc-34e2-4395-8bb9-320ac1c6f8e3\",\"moduleSequenceNumber\":56228},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/93006557-7ced-4fe2-b219-50036cb778b4\",\"moduleSequenceNumber\":85938}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":954,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"83.8.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":40,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/1306c032-d448-4a30-afde-71552eb1c42d\",\"moduleSequenceNumber\":3931}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":955,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\".\",\"moduleSequenceNumber\":956,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\".\",\"moduleSequenceNumber\":957,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2da10d12-552d-484d-8b8e-a98a533c1fec\",\"moduleSequenceNumber\":9102},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/f1227b81-b906-4df1-9465-27cdd39a534d\",\"moduleSequenceNumber\":24598}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":958,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/28353237-a543-4997-9b75-635612b78198\",\"moduleSequenceNumber\":7588}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":7588,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/50d5e215-6390-4e3d-b163-bed178f5f623\",\"moduleSequenceNumber\":56208},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1e541fcc-3e4e-49b5-b023-7b0d4d6dc062\",\"moduleSequenceNumber\":85928}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":960,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-515932-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[37,74,114,42,65,122,83,179,92,45],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"87.4.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\"],\"dataMap\":{},\"filename\":\"Weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":9,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b2f81ee1-9513-434d-88b5-af19dd12e1b5\",\"moduleSequenceNumber\":1730}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":961,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"CSEC\",\"moduleSequenceNumber\":962,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"CSEC\",\"moduleSequenceNumber\":963,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":964,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/9bc7667f-8871-43c1-bc76-9949b77b732c\",\"moduleSequenceNumber\":912},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/cbf55205-7d28-483e-bacb-815588fd63bd\",\"moduleSequenceNumber\":60969}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":965,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/efd6ce2a-03e6-45e4-9a99-05311dfa1416\",\"moduleSequenceNumber\":7557}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":7557,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-211594.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[185,51,5,38,51,20,159,119,108,34,53,192,38,16,120,93,143,76,37,193,141,130,178,91,200,44,147,198,180,59,11,159,18,197,11,173,161,102,81,182,44,39],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"37.1.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":967,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"The-Cave\",\"moduleSequenceNumber\":968,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":969,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":970,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":971,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":972,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"23.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73514-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":358469058,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837849.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,9,7,8,1,9,4,-5,2,-2,7,10,8,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"91.9.3.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":973,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"darkweb\",\"moduleSequenceNumber\":974,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"darkweb\",\"moduleSequenceNumber\":975,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":976,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":977,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":978,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2-2048\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2-2048\",\"httpPortOpen\":false,\"ip\":\"93.3.6.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":52,\"ramUsage\":1.75,\"server\":\"pserv-2-2048\",\"threads\":1170,\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/44536307-e5a1-4a6d-a8c8-b178bcc59436\",\"moduleSequenceNumber\":3944}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/afecb1d9-2a0d-4328-9a2d-83083cd343f9\",\"moduleSequenceNumber\":39333},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/c23c1fec-a9ba-4fba-a06c-4d0088c2bace\",\"moduleSequenceNumber\":73806}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/e8f2b804-4ac5-4bca-bb74-c3cac9c5ad2a\",\"moduleSequenceNumber\":7600}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":7600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/58edcb13-ba86-4abd-92cd-f642d8183f70\",\"moduleSequenceNumber\":897},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bd436d4f-331c-4a1e-8d66-5d489b76b5b5\",\"moduleSequenceNumber\":932}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3-32768\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3-32768\",\"httpPortOpen\":false,\"ip\":\"31.0.4.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":9605.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",55506.5217391304],\"dataMap\":{},\"filename\":\"Grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":53,\"ramUsage\":1.75,\"server\":\"pserv-3-32768\",\"threads\":4875,\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/a6a3588e-f449-4219-9815-c3c4b9d0f181\",\"moduleSequenceNumber\":949},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/49d05dcf-2dff-4fd8-bdcd-2ff45efc243a\",\"moduleSequenceNumber\":13093}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"omega-net\",\"--delay\",152992.9347826087],\"dataMap\":{},\"filename\":\"Hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"pid\":54,\"ramUsage\":1.7,\"server\":\"pserv-3-32768\",\"threads\":632,\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/3ac29d6b-6dcc-4d88-acc3-026e4bc6bad4\",\"moduleSequenceNumber\":939},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/773b7681-c7ee-473b-a16e-143925a32a96\",\"moduleSequenceNumber\":8935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/83069852-1cf3-4e8c-84cd-f9eaf6eee1e5\",\"moduleSequenceNumber\":7602}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":7602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/66867cff-d0a1-4e8d-8b6b-89bef7c7fa6a\",\"moduleSequenceNumber\":7601}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":7601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/a294bba6-41af-4deb-8e2e-f560ca323772\",\"moduleSequenceNumber\":903},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9c784a32-f230-47ad-93de-5e4b5c09db9a\",\"moduleSequenceNumber\":961}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4-262144\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4-262144\",\"httpPortOpen\":false,\"ip\":\"54.4.3.5\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-4-262144\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/06b7d8f5-2377-4eed-bc5c-7798f16216a1\",\"moduleSequenceNumber\":17919},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/2ed60abf-a81b-4712-9d81-87cac63bfead\",\"moduleSequenceNumber\":40124}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4-262144\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4-262144\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4-262144\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5-16384\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5-16384\",\"httpPortOpen\":false,\"ip\":\"8.7.4.1\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-5-16384\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-5-16384\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5-16384\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5-16384\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6-4096\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6-4096\",\"httpPortOpen\":false,\"ip\":\"2.9.4.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-6-4096\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-6-4096\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6-4096\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6-4096\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7-2048\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7-2048\",\"httpPortOpen\":false,\"ip\":\"63.1.2.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-7-2048\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-7-2048\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7-2048\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7-2048\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16-65536\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16-65536\",\"httpPortOpen\":false,\"ip\":\"25.0.4.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-16-65536\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16-65536\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16-65536\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16-65536\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17-16384\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17-16384\",\"httpPortOpen\":false,\"ip\":\"10.3.6.5\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-17-16384\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-17-16384\",\"moduleSequenceNumber\":1014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17-16384\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17-16384\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18-8192\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18-8192\",\"httpPortOpen\":false,\"ip\":\"63.8.3.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-18-8192\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-18-8192\",\"moduleSequenceNumber\":1018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18-8192\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-18-8192\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19-4096\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19-4096\",\"httpPortOpen\":false,\"ip\":\"22.2.7.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-19-4096\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-19-4096\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19-4096\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-19-4096\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20-2048\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20-2048\",\"httpPortOpen\":false,\"ip\":\"12.7.2.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-20-2048\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-20-2048\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20-2048\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-20-2048\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-36-64TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-36-64TB\",\"httpPortOpen\":false,\"ip\":\"43.1.0.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-36-64TB\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-36-64TB\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-36-64TB\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-36-64TB\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-37-8TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-37-8TB\",\"httpPortOpen\":false,\"ip\":\"1.4.5.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-37-8TB\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-37-8TB\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-37-8TB\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-37-8TB\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-38-4TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-38-4TB\",\"httpPortOpen\":false,\"ip\":\"31.6.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-38-4TB\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-38-4TB\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-38-4TB\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-38-4TB\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-39-2TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-39-2TB\",\"httpPortOpen\":false,\"ip\":\"47.3.7.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-39-2TB\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-39-2TB\",\"moduleSequenceNumber\":1042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-39-2TB\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-39-2TB\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-42-4TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-42-4TB\",\"httpPortOpen\":false,\"ip\":\"53.8.3.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-42-4TB\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-42-4TB\",\"moduleSequenceNumber\":1046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-42-4TB\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-42-4TB\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-43-2TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-43-2TB\",\"httpPortOpen\":false,\"ip\":\"42.3.8.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-43-2TB\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-43-2TB\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-43-2TB\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-43-2TB\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-47-64TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-47-64TB\",\"httpPortOpen\":false,\"ip\":\"67.5.6.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-47-64TB\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-47-64TB\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-47-64TB\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-47-64TB\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-48-8TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-48-8TB\",\"httpPortOpen\":false,\"ip\":\"28.0.0.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-48-8TB\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-48-8TB\",\"moduleSequenceNumber\":1058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-48-8TB\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-48-8TB\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-49-4TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-49-4TB\",\"httpPortOpen\":false,\"ip\":\"82.1.9.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-49-4TB\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-49-4TB\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-49-4TB\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-49-4TB\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-50-2TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-50-2TB\",\"httpPortOpen\":false,\"ip\":\"6.5.9.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-50-2TB\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-50-2TB\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-50-2TB\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-50-2TB\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-51-4TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-51-4TB\",\"httpPortOpen\":false,\"ip\":\"12.2.0.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-51-4TB\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-51-4TB\",\"moduleSequenceNumber\":1070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-51-4TB\",\"moduleSequenceNumber\":1071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-51-4TB\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-52-2TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-52-2TB\",\"httpPortOpen\":false,\"ip\":\"40.8.7.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-52-2TB\",\"moduleSequenceNumber\":1073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-52-2TB\",\"moduleSequenceNumber\":1074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-52-2TB\",\"moduleSequenceNumber\":1075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-52-2TB\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-53-2TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-53-2TB\",\"httpPortOpen\":false,\"ip\":\"92.6.1.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus,\\n\\tisMinSecurity,\\n\\thasMaxMoney,\\n\\tgetMaxBuyableServerRam,\\n\\tformatNumber,\\n\\tgetServersSortedByProfit\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.hasAdminRights;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getRemoteServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => \\n\\t\\te != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet moneyPerSecond = (s) => ns.getServerMaxMoney(s)*ns.hackAnalyze(s)*1000/(ns.getHackTime(s)+1200); \\n\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s) ;\\n\\tlet value = (s) => ns.getServerMaxMoney(s) * ns.hackAnalyzeChance(s);\\n\\t//return getHackableServers(ns).reduce((e, n) => moneyPerSecond(e) > moneyPerSecond(n) ? e : n);\\n\\t//return getHackableServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n\\treturn getHackableServers(ns).reduce((e, n) => value(e) > value(n) ? e : n);\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms) / ms * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, ...args){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost))) {\\n\\t\\tns.exec(file, s, t, ...args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction isMinSecurity(ns, target){\\n\\treturn ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction hasMaxMoney(ns, target){\\n\\treturn ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMaxBuyableServerRam(ns){\\n\\tlet exp = 0;\\n\\tlet canBuy = (ram) => ns.getPurchasedServerCost(ram) <= ns.getPlayer().money;\\n\\twhile(canBuy(2**(exp+1)) && 2**(exp+1) <= ns.getPurchasedServerMaxRam())\\n\\t\\texp++;\\n\\treturn exp && 2**exp;\\n}\\n\\n/** @param {NS} ns */\\nfunction getServersSortedByProfit(ns){\\n\\treturn getHackableServers(ns).filter(s => ns.getServerMaxMoney(s) > 0).sort((a,b) => ns.getServerMaxMoney(b)-ns.getServerMaxMoney(a));\\t\\n}\\n\\n/** @param {Number} num */\\nfunction formatNumber(num, fractionDigits=3){\\n\\tlet suffix = ['', 'k', 'm', 'b', 't', 'q'];\\n\\tlet i = 0;\\n\\tlet n = num;\\n\\twhile(n >= 1000){\\n\\t\\tn /= 1000;\\n\\t\\ti++;\\n\\t}\\n\\treturn `${n.toFixed(fractionDigits)}${suffix[i]}`;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.55,\"server\":\"pserv-53-2TB\",\"moduleSequenceNumber\":7547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.hack(data.target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-53-2TB\",\"moduleSequenceNumber\":7548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.grow(data.target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-53-2TB\",\"moduleSequenceNumber\":7549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet data = ns.flags([\\n\\t\\t['target', ''],\\n\\t\\t['delay', 0]\\n\\t\\t]);\\n\\tawait ns.sleep(data.delay);\\n\\tawait ns.weaken(data.target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-53-2TB\",\"moduleSequenceNumber\":7550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-54-1TB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-54-1TB\",\"httpPortOpen\":false,\"ip\":\"77.5.3.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":166912.59103075124,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":6062.925000004729}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":3797.7999999971858}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":185765.6753516253}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"maxM\":\"run maxMoney.js\",\"infest\":\"run infest.js\",\"killr\":\"run KillRemotes.js\",\"cleanr\":\"run CleanRemotes.js\",\"update\":\"run UpdateScripts.js\"}","GlobalAliasesSave":"{\"test\":\"run test.js\",\"daemon\":\"run Daemon.js\",\"myservers\":\"run MyServers.js\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643976507296","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643981364365"}}