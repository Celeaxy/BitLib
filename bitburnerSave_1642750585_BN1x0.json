{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":146,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":70,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":49668.4649999169,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":4083.1559999990877,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":32059954.53813118,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Alpha Enterprises\":\"Software Engineering Intern\"},\"companyName\":\"Alpha Enterprises\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":46.574999999999996,\"onlineTimeSeconds\":247637.00000144253,\"ram\":2,\"totalMoneyGenerated\":5552645.588998347,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":46.574999999999996,\"onlineTimeSeconds\":236647.20000142386,\"ram\":2,\"totalMoneyGenerated\":5535496.49999836,\"name\":\"hacknet-node-1\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":1,\"workExpMult\":1,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642750584474,\"totalPlaytime\":248970000,\"playtimeSinceLastAug\":248970000,\"playtimeSinceLastBitnode\":248970000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":18361281.89435267,\"hacknet\":11088142.089025129,\"hacknet_expenses\":-117934.93775068849,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":32058954.53813113,\"work\":7128000,\"servers\":-4200534.50752,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":18361281.89435267,\"hacknet\":11088142.089025129,\"hacknet_expenses\":-117934.93775068849,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":32058954.53813113,\"work\":7128000,\"servers\":-4200534.50752,\"other\":-200000,\"augmentations\":0}},\"scriptProdSinceLastAug\":5547059,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642502927292},{\"ID\":\"NS2\",\"unlockedOn\":1642504972779},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642662597019},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642670308256},{\"ID\":\"TOR\",\"unlockedOn\":1642670724035},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642750546476}],\"factionWorkType\":\"\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"55.9.7.1\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * takes parameters in the form of key=value\\n * no spaces!\\n * param options:\\n * target=server: server to hack \\n */\\n\\nimport {needsWeaken, getMaxGrowth} from 'lib.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tlet target = ns.args[0];\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, target)){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t}\\n\\t\\twhile(ns.growthAnalyze(target, getMaxGrowth(ns, target), ns.getServer().cpuCores)){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basicHack.js\",\"url\":\"blob:https://danielyxie.github.io/d9d6d613-3a88-4ce1-b881-8f8443a9d80d\"}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":433,\"_hash\":\"357a160fd1de6f7230cb25d0d073a8c2460597065dd58dbbe625f267717444f0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getMaxAvailableThreads, getAllHackableServers, getServersToHack} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\t\\n\\tns.print(getServersToHack(ns));\\n\\t//ns.print(getAllHackedServers(ns));\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/75b5a9fa-ba35-4cd8-b838-0e25ca187ea4\",\"moduleSequenceNumber\":2599},{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/5aaf082e-159f-41d6-9e52-e949fa8ee6f5\",\"moduleSequenceNumber\":5202}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":434,\"_hash\":\"1af10b7ded311fdcf2f6a0c4939531fcd348b16bc43fbdb37ec33a76789f997f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {scpAll, execAllMax, getMostProfitableServer, getAllHackedServers} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tawait scpAll(ns, ['allhack.js', 'lib.js', 'prepareHGW.js',\\n\\t'Hack.js', 'Grow.js', 'Weaken.js']);\\n\\tlet target = getMostProfitableServer(ns);\\n\\tns.run('prepareHGW.js', 1, target);\\n\\t//execAllMax(ns, 'allhack.js', target);\\n\\t\\n\\t//execAllMax(ns, 'allhack.js', target);\\n\\t//ns.spawn('keepProfitable.js',1, target);\\n}\",\"filename\":\"infest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":4338},{\"filename\":\"infest.js\",\"url\":\"blob:https://danielyxie.github.io/08558c90-2a74-4d72-ace4-061ce9d4f1e9\",\"moduleSequenceNumber\":4339}],\"dependents\":[],\"ramUsage\":3.55,\"server\":\"home\",\"moduleSequenceNumber\":435,\"_hash\":\"0c7eadb6fd7aa9178fe13336016c65ce2facf8da8bfcb3ff49a6ee8e5d6d12e3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getServersToHack(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"moduleSequenceNumber\":436,\"_hash\":\"196138d3c1cfc44f34d94d66d43263dc4e910ea04392012dded0409ceb515abb\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {nukeAll, killAllRemote} from 'lib.js';\\n\\n\\nvar die, debug;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\tvar ran = 0;\\n\\tif(ns.args.length){\\n\\t\\tdie = ns.args[0] == 'die';\\n\\t\\tdebug = ns.args[0] == 'debug';\\n\\t}\\n\\t\\n\\tif(debug) ns.tail();\\n\\twhile(!die){\\t\\n\\t\\tlet nuked = nukeAll(ns);\\n\\t\\tif(nuked.length){\\n\\t\\t\\tkillAllRemote(ns);\\n\\t\\t\\tawait infest(ns);\\n\\t\\t\\twhile(ns.scriptRunning('prepareHGW.js', 'home')) await ns.sleep(200);\\n\\t\\t}\\n\\t\\tns.print(ns.getScriptName(), ran++);\\n\\t\\tawait ns.sleep(200);\\n\\t}\\n}\\n\\nasync function infest(ns){\\n\\tawait scpAll(ns, ['allhack.js', 'lib.js', 'prepareHGW.js',\\n\\t'Hack.js', 'Grow.js', 'Weaken.js']);\\n\\tlet target = getMostProfitableServer(ns);\\n\\tns.run('prepareHGW.js', 1, target);\\n}\",\"filename\":\"Daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/85866db8-af98-4021-96be-bfa544784a5a\",\"moduleSequenceNumber\":9537},{\"filename\":\"Daemon.js\",\"url\":\"blob:https://danielyxie.github.io/92064aa5-55d5-4554-b6eb-dc89bb602c4b\",\"moduleSequenceNumber\":16894}],\"dependents\":[],\"ramUsage\":6.85,\"server\":\"home\",\"moduleSequenceNumber\":437,\"_hash\":\"f3701943c2ce862c7dec9dbcdbf442acd76bfc5d47294af0167727653222e3f4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {cleanAllRemote} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tcleanAllRemote(ns);\\t\\n}\",\"filename\":\"CleanRemotes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":63937},{\"filename\":\"CleanRemotes.js\",\"url\":\"blob:https://danielyxie.github.io/e5ae3510-295e-4b44-a5da-a98ed7f22c8c\",\"moduleSequenceNumber\":73618}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":438,\"_hash\":\"315a7e1f13289bc6922e661fef58688a3e12a62264d7f74a661fdb5572e6d1bf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {killAllRemote} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tkillAllRemote(ns);\\n}\",\"filename\":\"KillRemotes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/75b5a9fa-ba35-4cd8-b838-0e25ca187ea4\",\"moduleSequenceNumber\":2599},{\"filename\":\"KillRemotes.js\",\"url\":\"blob:https://danielyxie.github.io/3880b139-7334-494c-9724-773356ead08d\",\"moduleSequenceNumber\":6501}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":439,\"_hash\":\"94f9d6c0026053db5bcadfd103e3d543bb82a03dd037825cc1b987345160d54f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":440,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":441,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\treturn;\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/4b3fc62f-07c2-4452-904b-b54346c030e9\",\"moduleSequenceNumber\":155474},{\"filename\":\"prepareHGW.js\",\"url\":\"blob:https://danielyxie.github.io/d4ccb392-6467-4ef5-83e0-e22fd158900f\",\"moduleSequenceNumber\":163896}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":442,\"_hash\":\"cce09afff2d75d87738c3cf2118e73c6b56b46c4c6182538cdcda0a15db66169\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":443,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":444,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"68.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":445,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"ecorp\",\"moduleSequenceNumber\":446,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":447,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":448,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":449,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":450,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37839582844,\"moneyMax\":945989571100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1186,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"57.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":451,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"megacorp\",\"moduleSequenceNumber\":452,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":453,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":454,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":455,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":456,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49179668269,\"moneyMax\":1229491706725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1120,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"73.8.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":457,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":458,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":459,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":460,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":461,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":462,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":23646126505,\"moneyMax\":591153162625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1000,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-221567.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[1,0,0,1,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"16.3.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":463,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"blade\",\"moduleSequenceNumber\":464,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"blade\",\"moduleSequenceNumber\":465,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":466,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":467,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":468,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":36440692132,\"moneyMax\":911017303300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1193,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"69.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":469,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"nwo\",\"moduleSequenceNumber\":470,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"nwo\",\"moduleSequenceNumber\":471,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":472,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":473,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":474,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22963873479,\"moneyMax\":574096836975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1086,\"serverGrowth\":69}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"59.4.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":475,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":476,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":477,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":478,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":479,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":480,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":21812943422,\"moneyMax\":545323585550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1129,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"64.1.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":481,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"omnitek\",\"moduleSequenceNumber\":482,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":483,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":484,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":485,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":486,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":17049200246,\"moneyMax\":426230006150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1087,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"32.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":487,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"4sigma\",\"moduleSequenceNumber\":488,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":489,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":490,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":491,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":492,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":21892362663,\"moneyMax\":547309066575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"14.8.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":493,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":494,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":495,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":496,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":497,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":498,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":26575629806,\"moneyMax\":664390745150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":991,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"14.3.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":499,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":500,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":501,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":502,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":503,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":504,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1561355277,\"moneyMax\":39033881925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1077,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"29.5.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":505,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":506,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":507,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":508,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":509,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":510,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1287,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"44.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":511,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"stormtech\",\"moduleSequenceNumber\":512,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":513,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":514,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":515,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":516,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1102223593,\"moneyMax\":27555589825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1022,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"64.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":517,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"defcomm\",\"moduleSequenceNumber\":518,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":519,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":520,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":521,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":522,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":864794112,\"moneyMax\":21619852800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":948,\"serverGrowth\":67}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"33.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":523,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"infocomm\",\"moduleSequenceNumber\":524,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":525,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":526,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":527,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":528,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":608842153,\"moneyMax\":15221053825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":930,\"serverGrowth\":67}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"27.2.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":529,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"helios\",\"moduleSequenceNumber\":530,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"helios\",\"moduleSequenceNumber\":531,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":532,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":533,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":534,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":620287052,\"moneyMax\":15507176300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"74.1.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":535,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"vitalife\",\"moduleSequenceNumber\":536,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":537,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":538,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":539,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":540,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":794339286,\"moneyMax\":19858482150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"67.3.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":541,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"icarus\",\"moduleSequenceNumber\":542,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"icarus\",\"moduleSequenceNumber\":543,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":544,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":545,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":546,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":901116038,\"moneyMax\":22527900950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"13.8.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":547,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":548,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":549,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":550,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":551,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":552,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1111219583,\"moneyMax\":27780489575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"70.7.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":553,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":554,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":555,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":556,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":557,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":558,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":831444144,\"moneyMax\":20786103600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"42.8.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":559,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"microdyne\",\"moduleSequenceNumber\":560,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":561,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":562,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":563,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":564,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":690144867,\"moneyMax\":17253621675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"91.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":565,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":566,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":567,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":568,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":569,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":570,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":830645948,\"moneyMax\":20766148700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"9.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":571,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":572,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":573,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":574,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":575,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":576,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":758908662,\"moneyMax\":18972716550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"14.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":577,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":578,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":579,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":580,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":581,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":582,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1056703241,\"moneyMax\":26417581025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247765.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[1,4],[1,4,4],[6,6,6,6]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"96.3.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":583,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"omnia\",\"moduleSequenceNumber\":584,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"omnia\",\"moduleSequenceNumber\":585,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":586,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":587,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":588,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":977633189,\"moneyMax\":24440829725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"84.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":589,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"zb-def\",\"moduleSequenceNumber\":590,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":591,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":592,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":593,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":594,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":1031972883,\"moneyMax\":25799322075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"6.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":595,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":596,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":597,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":598,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":599,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":600,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":923645202,\"moneyMax\":23091130050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"57.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":601,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"solaris\",\"moduleSequenceNumber\":602,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"solaris\",\"moduleSequenceNumber\":603,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":604,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":605,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":606,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":741259464,\"moneyMax\":18531486600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":756,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"9.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":607,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"deltaone\",\"moduleSequenceNumber\":608,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":609,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":610,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":611,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":612,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1493571750,\"moneyMax\":37339293750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"50.1.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":613,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":614,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":615,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":616,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":617,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":618,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1634388057,\"moneyMax\":40859701425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"69.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":619,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"nova-med\",\"moduleSequenceNumber\":620,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":621,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":622,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":623,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":624,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1209269765,\"moneyMax\":30231744125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"0.6.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":625,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":626,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":627,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":628,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":629,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":630,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1402327683,\"moneyMax\":35058192075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"68.3.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":631,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"unitalife\",\"moduleSequenceNumber\":632,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":633,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":634,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":635,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":636,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1047434294,\"moneyMax\":26185857350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-580361-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":81,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"20.0.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":637,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":638,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":639,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":640,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":641,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":642,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":742209320,\"moneyMax\":18555233000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":699,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"96.1.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":643,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":644,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":645,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":646,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":647,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":648,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":639798074,\"moneyMax\":15994951850,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"18.5.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":649,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":650,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":651,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":652,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":653,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":654,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":624060594,\"moneyMax\":15601514850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":569,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"32.4.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":655,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":656,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":657,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":658,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":659,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":660,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":296277591,\"moneyMax\":7406939775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":439,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"67.9.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":661,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":662,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":663,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":664,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":665,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":666,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":227688241,\"moneyMax\":5692206025,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":392,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"73.8.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":667,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":668,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":669,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":670,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":671,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":672,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":882598052,\"moneyMax\":22064951300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":774,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"50.6.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":673,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":674,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":675,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":676,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":677,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":678,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":259291221,\"moneyMax\":6482280525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":442,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"8.9.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":679,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"syscore\",\"moduleSequenceNumber\":680,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"syscore\",\"moduleSequenceNumber\":681,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":682,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":683,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":684,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":571353257,\"moneyMax\":14283831425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":589,\"serverGrowth\":67}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"48.9.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":685,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"catalyst\",\"moduleSequenceNumber\":686,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":687,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":688,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":689,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":690,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":544193703,\"moneyMax\":13604842575,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":33}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"93.7.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":691,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"the-hub\",\"moduleSequenceNumber\":692,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":693,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":694,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":695,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":696,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":175343353,\"moneyMax\":4383583825,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":304,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"7.7.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":697,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"comptek\",\"moduleSequenceNumber\":698,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"comptek\",\"moduleSequenceNumber\":699,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":700,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":701,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":702,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":239844409,\"moneyMax\":5996110225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":398,\"serverGrowth\":48}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"35.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":703,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"netlink\",\"moduleSequenceNumber\":704,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"netlink\",\"moduleSequenceNumber\":705,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":706,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":707,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":708,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":411,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"44.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":709,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":710,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":711,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":712,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":713,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":714,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":73013060,\"moneyMax\":1825326500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":287,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"29.4.6.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":715,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":716,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":717,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":718,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":716},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":865}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":719,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/4b3fc62f-07c2-4452-904b-b54346c030e9\",\"moduleSequenceNumber\":155474},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f2da137d-fbf4-4a8f-a98f-19494792a261\",\"moduleSequenceNumber\":155615}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":720,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.01,\"minDifficulty\":1,\"moneyAvailable\":1561153.7760782884,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"96.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":721,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":722,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":723,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":724,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":722},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":866}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":725,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":73743},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/106521a6-d8b4-4bbf-bd2c-0f39305a4a19\",\"moduleSequenceNumber\":74530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":726,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10.102,\"minDifficulty\":3,\"moneyAvailable\":2000008.9041785193,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"80.8.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":727,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":728,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":729,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":730,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":728},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":867}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":731,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":73899},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/106521a6-d8b4-4bbf-bd2c-0f39305a4a19\",\"moduleSequenceNumber\":106169}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":732,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790461.cct\",\"type\":\"Total Ways to Sum\",\"data\":36,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"52.3.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":733,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":734,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":735,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":736,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":734},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":868}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":737,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":73899},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/106521a6-d8b4-4bbf-bd2c-0f39305a4a19\",\"moduleSequenceNumber\":106170}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":738,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":7.167999999999988,\"minDifficulty\":5,\"moneyAvailable\":1836071.3623970714,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"41.7.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":739,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"zer0\",\"moduleSequenceNumber\":740,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"zer0\",\"moduleSequenceNumber\":741,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":742,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":743,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":744,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"23.9.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":745,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":746,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":747,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":748,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":746},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":869}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":749,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":73755},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/106521a6-d8b4-4bbf-bd2c-0f39305a4a19\",\"moduleSequenceNumber\":74531}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":750,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"8.2.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":751,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":752,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":753,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":754,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":755,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":756,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.3.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":757,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":758,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":759,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":760,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":761,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":762,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"28.9.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":763,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":764,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":765,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":766,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":764},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":870}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":767,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":73899},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/106521a6-d8b4-4bbf-bd2c-0f39305a4a19\",\"moduleSequenceNumber\":106171}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":768,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"92.4.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":769,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":770,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":771,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":772,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":770},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":871}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":773,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":73899},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/106521a6-d8b4-4bbf-bd2c-0f39305a4a19\",\"moduleSequenceNumber\":106172}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":774,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":69223.47009703233,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-935119.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())))(a((((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"72.2.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":775,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":776,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":777,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":778,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":779,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":780,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"57.1.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":781,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":782,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":783,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":784,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":785,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":786,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"0.9.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":787,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"omega-net\",\"moduleSequenceNumber\":788,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":789,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":790,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":791,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":792,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":67719951,\"moneyMax\":1692998775,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":185,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"40.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":793,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":794,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":795,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":796,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":797,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":798,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":55639245,\"moneyMax\":1390981125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":237,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"38.9.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":799,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":800,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":801,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":802,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47b319ed-1263-4a27-a4da-b9fb75c6be34\",\"moduleSequenceNumber\":800},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/525f2914-0c55-4a73-9296-c480b722073e\",\"moduleSequenceNumber\":872}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":803,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":73899},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/106521a6-d8b4-4bbf-bd2c-0f39305a4a19\",\"moduleSequenceNumber\":106173}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":804,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":20771922.88255478,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"37.2.2.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":805,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":806,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":807,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":808,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":809,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":810,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":478,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"71.2.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":811,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":812,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":813,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":814,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":815,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":816,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":970,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"83.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":817,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":818,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":819,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":820,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":821,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":822,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":726,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"97.4.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":823,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":824,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":825,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":826,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":827,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":828,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":523,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"81.8.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":829,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":830,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":831,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":832,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":833,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":834,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":345,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"67.4.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":835,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":836,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":837,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":838,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":839,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":840,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"83.8.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":841,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\".\",\"moduleSequenceNumber\":842,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\".\",\"moduleSequenceNumber\":843,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":844,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":845,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":846,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"87.4.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":847,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":848,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":849,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":850,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":851,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":852,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"37.1.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":853,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":854,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":855,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":856,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":857,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":858,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"23.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73514-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":358469058,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"91.9.3.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":859,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers, \\n\\tgetAllHackableServers, \\n\\tgetAllHackedServers,\\n\\tgetServersToHack, \\n\\tcanHack, \\n\\tnukeAll, \\n\\tscpAll,\\n\\texecAll, \\n\\texecAllMax, \\n\\trmAllRemote, \\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetMaxAvailableThreads\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount <= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackableServers(ns) {\\n\\treturn getAllServers(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getAllHackedServers(ns) {\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home');\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllHackableServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet to_hack = getServersToHack(ns);\\n\\tfor (let s of to_hack) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn !!to_hack.length;\\n}\\n\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args ) {\\n\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\treturn getAllHackedServers(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t\\t});\\n\\t/*for (let s of getAllHackedServers(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host)/ns.getServerMoneyAvailable(host); \\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getAllHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host){\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif(ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)){\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t}else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram){\\n\\treturn (ns.getServerMaxRam(host)-ns.getServerUsedRam(host))/ ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getMaxAvailableThreads(ns, host, ram){\\n\\treturn ns.getServerMaxRam(host)/ ram | 0;\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"darkweb\",\"moduleSequenceNumber\":860,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllHackedServers, getAvailableThreads, needsWeaken, execAllMax } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\n\\tawait killSecurity(ns, target);\\n\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif(!threadsWeaken){\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\twhile (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)\\n\\t\\t|| ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\t\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet delta = weakenTime - growTime + 200;\\n\\t\\tlet serverIterator = hackedServers[Symbol.iterator]();\\n\\t\\tlet server = serverIterator.next().value;\\n\\t\\tvar threads = getAvailableThreads(ns, server, 1.75);\\n\\t\\tif (needsWeaken(ns, target, threadsWeaken) && !firstPass) {\\n\\t\\t\\twhile (threadsWeaken) {\\n\\t\\t\\t\\tif (threadsWeaken >= threads) {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreadsWeaken -= threads;\\n\\t\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', server, threads, target);\\n\\t\\t\\t\\t\\tthreads = threadsWeaken;\\n\\t\\t\\t\\t\\tthreadsWeaken = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t\\tif (threads) ns.exec('Grow.js', server, threads, target);\\n\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\tthreads = getAvailableThreads(ns, server, 1.75);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfirstPass = firstPass || true;\\n\\t\\t \\n\\t\\twhile (threadsGrow) {\\n\\t\\t\\tif (threadsGrow >= threads) {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreadsGrow -= threads;\\n\\t\\t\\t\\tserver = serverIterator.next().value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exec('Grow.js', server, threads, target);\\n\\t\\t\\t\\tthreads = threadsGrow;\\n\\t\\t\\t\\tthreadsGrow = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tvar weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tlet hackedServers = getAllHackedServers(ns);\\n\\t\\tlet maxThreads = hackedServers.map(e => getAvailableThreads(ns, e, 1.75)).reduce((e, n) => e + n);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft >= maxThreads) {\\n\\t\\t\\texecAllMax(ns, 'Weaken.js', target);\\n\\t\\t} else {\\n\\t\\t\\tfor (let s of getAllHackedServers(ns)) {\\n\\t\\t\\t\\tlet threads = getAvailableThreads(ns, s, 1.75);\\n\\t\\t\\t\\tif (weakensLeft >= threads) {\\n\\t\\t\\t\\t\\tweakensLeft -= threads;\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tthreads = weakensLeft;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(threads){\\n\\t\\t\\t\\t\\tns.exec('Weaken.js', s, threads, target);\\n\\t\\t\\t\\t}else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":861,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":862,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":863,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":864,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":15751.619467692159,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"maxM\":\"run maxMoney.js\",\"infest\":\"run infest.js\",\"killr\":\"run KillRemotes.js\",\"cleanr\":\"run CleanRemotes.js\"}","GlobalAliasesSave":"{\"test\":\"run test.js\",\"daemon\":\"run Daemon.js\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":16,\"opened\":false}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1642692371474","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642750584607"}}