{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":269,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":150,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":2383757.920640296,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":57085.745999747225,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":3357565000.337526,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Alpha Enterprises\":\"Junior Software Engineer\"},\"companyName\":\"Alpha Enterprises\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-1-1024\",\"pserv-2-2048\",\"pserv-3-32768\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":46.574999999999996,\"onlineTimeSeconds\":1300037.9999804695,\"ram\":2,\"totalMoneyGenerated\":54568222.163605936,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":46.574999999999996,\"onlineTimeSeconds\":1289048.1999825994,\"ram\":2,\"totalMoneyGenerated\":54551073.07460595,\"name\":\"hacknet-node-1\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":1,\"workExpMult\":1,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":7200000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643803109453,\"totalPlaytime\":1301491600,\"playtimeSinceLastAug\":1301491600,\"playtimeSinceLastBitnode\":1301491600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":5122220294.534592,\"hacknet\":109119295.2366207,\"hacknet_expenses\":-117934.93775068849,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":3357564000.337526,\"work\":101942880,\"servers\":-1975400534.50752,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":5122220294.534592,\"hacknet\":109119295.2366207,\"hacknet_expenses\":-117934.93775068849,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":3357564000.337526,\"work\":101942880,\"servers\":-1975400534.50752,\"other\":-200000,\"augmentations\":0}},\"scriptProdSinceLastAug\":4953875777,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642502927292},{\"ID\":\"NS2\",\"unlockedOn\":1642504972779},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642662597019},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642670308256},{\"ID\":\"TOR\",\"unlockedOn\":1642670724035},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642750546476},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643791843782},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643796338934}],\"factionWorkType\":\"\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"55.9.7.1\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * takes parameters in the form of key=value\\n * no spaces!\\n * param options:\\n * target=server: server to hack \\n */\\n\\nimport {needsWeaken, getMaxGrowth} from 'lib.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args.length){\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tlet target = ns.args[0];\\n\\twhile(true){\\n\\t\\twhile(needsWeaken(ns, target)){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t}\\n\\t\\twhile(ns.growthAnalyze(target, getMaxGrowth(ns, target), ns.getServer().cpuCores)){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basicHack.js\",\"url\":\"blob:https://danielyxie.github.io/d9d6d613-3a88-4ce1-b881-8f8443a9d80d\"}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":453,\"_hash\":\"357a160fd1de6f7230cb25d0d073a8c2460597065dd58dbbe625f267717444f0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getNukableServers, getServersToHack, updatePortData, getPortData, getMostProfitableServer, getAllAvailableThreads} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\t//let target = getTarget(ns);\\n\\t//ns.purchaseServer('pserv-3-32768', 32768);\\n\\n\\tns.print(getNukableServers(ns));\\n\\tns.print(getServersToHack(ns));\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/b555ebb0-64ae-4368-a0bd-55f150b21e29\",\"moduleSequenceNumber\":456},{\"filename\":\"test.js\",\"url\":\"blob:https://danielyxie.github.io/04f55d84-b8bb-4ddf-9374-1acb6b918d9e\",\"moduleSequenceNumber\":23568}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":454,\"_hash\":\"1af10b7ded311fdcf2f6a0c4939531fcd348b16bc43fbdb37ec33a76789f997f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {scpAll, getMostProfitableServer} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tawait scpAll(ns, ['allhack.js', 'lib.js', 'prepareHGW.js',\\n\\t'Hack.js', 'Grow.js', 'Weaken.js']);\\n\\tlet target = getMostProfitableServer(ns);\\n\\tns.run('prepareHGW.js', 1, target);\\n\\t//execAllMax(ns, 'allhack.js', target);\\n\\t\\n\\t//execAllMax(ns, 'allhack.js', target);\\n\\t//ns.spawn('keepProfitable.js',1, target);\\n}\",\"filename\":\"infest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/8e582f41-acfe-46ad-91a9-7eab61757501\",\"moduleSequenceNumber\":4396},{\"filename\":\"infest.js\",\"url\":\"blob:https://danielyxie.github.io/f9be39c4-4e20-4d99-ae94-bbf307d7fce1\",\"moduleSequenceNumber\":4838}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":455,\"_hash\":\"0c7eadb6fd7aa9178fe13336016c65ce2facf8da8bfcb3ff49a6ee8e5d6d12e3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"home\",\"moduleSequenceNumber\":456,\"_hash\":\"196138d3c1cfc44f34d94d66d43263dc4e910ea04392012dded0409ceb515abb\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runScript, getPortData } from 'lib.js';\\n\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tif (ns.args.length) {\\n\\t\\tvar die = ns.args[0] == 'die';\\n\\t\\tvar debug = ns.args[0] == 'debug';\\n\\t}\\n\\tif (debug) ns.tail();\\n\\n\\tif (die) {\\n\\t\\tns.scriptKill('Daemon.js', 'home');\\n\\t\\treturn;\\n\\t}\\n\\n\\tawait runScript(ns, 'DaemonSetup.js');\\n\\tawait runScript(ns, 'OpenPorts.js');\\n\\tawait runScript(ns, 'NukeAll.js');\\n\\tawait runScript(ns, 'HGWSetup.js');\\n\\n\\twhile (!die) {\\n\\t\\tswitch (getPortData(ns, 20).status) {\\n\\t\\t\\tcase 'openports':\\n\\t\\t\\t\\tawait runScript(ns, 'OpenPorts.js');\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'nuke':\\n\\t\\t\\t\\tawait runScript(ns, 'NukeAll.js');\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'hgwsetup':\\n\\t\\t\\t\\tawait runScript(ns, 'HGWSetup.js');\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'hgw':\\n\\t\\t\\t\\tawait runScript(ns, 'HGW.js')\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif(getPortData(ns, 20).status == 'end') break;\\n\\t}\\n}\",\"filename\":\"Daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2cc16f35-865f-436a-b3a6-dc72be3aeb05\",\"moduleSequenceNumber\":456},{\"filename\":\"Daemon.js\",\"url\":\"blob:https://danielyxie.github.io/33f043d7-cb4c-42b9-9343-6f98f69c70be\",\"moduleSequenceNumber\":18083}],\"dependents\":[],\"ramUsage\":4.65,\"server\":\"home\",\"moduleSequenceNumber\":457,\"_hash\":\"f3701943c2ce862c7dec9dbcdbf442acd76bfc5d47294af0167727653222e3f4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {cleanAllRemote} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tcleanAllRemote(ns);\\t\\n}\",\"filename\":\"CleanRemotes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2993dca6-035c-4c18-8314-054aa3a1e52a\",\"moduleSequenceNumber\":63937},{\"filename\":\"CleanRemotes.js\",\"url\":\"blob:https://danielyxie.github.io/e5ae3510-295e-4b44-a5da-a98ed7f22c8c\",\"moduleSequenceNumber\":73618}],\"dependents\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":458,\"_hash\":\"315a7e1f13289bc6922e661fef58688a3e12a62264d7f74a661fdb5572e6d1bf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {killAllRemote} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tkillAllRemote(ns);\\n}\",\"filename\":\"KillRemotes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/150a3947-f091-4349-973c-9f8588ea636e\",\"moduleSequenceNumber\":456},{\"filename\":\"KillRemotes.js\",\"url\":\"blob:https://danielyxie.github.io/fc3e8afb-9bf0-452f-9669-d1e1c81e8f88\",\"moduleSequenceNumber\":31270}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":459,\"_hash\":\"94f9d6c0026053db5bcadfd103e3d543bb82a03dd037825cc1b987345160d54f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":460,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":461,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":462,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":463,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortData, updatePortData, cohack, cogrow, coweaken, logServerStatus} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet hgw =  getPortData(ns, 20).hgw;\\n\\tlet target = hgw.target;\\n\\n\\tlet deltaWG = hgw.weaken.time - hgw.grow.time - 400;\\n\\tlet deltaHG = hgw.grow.time - hgw.hack.time - 400;\\n\\t\\n\\tcoweaken(ns, target, hgw.weaken.threads);\\n\\tawait ns.sleep(deltaWG);\\n\\tcogrow(ns, target, hgw.grow.threads);\\n\\tawait ns.sleep(deltaHG);\\n\\tcohack(ns, target, hgw.hack.threads);\\n\\tawait ns.sleep(hgw.hack.time+1200);\\n\\tns.print('Successfully finished HGW-Batch!');\\n\\n\\tns.print(logServerStatus(ns, target));\\n\\tns.print(hgw);\\n\\n\\tupdatePortData(ns, 20, 'status', 'openports');\\t\\n}\",\"filename\":\"HGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/99b5c95c-f70b-4062-8c90-458aefedeae1\",\"moduleSequenceNumber\":456},{\"filename\":\"HGW.js\",\"url\":\"blob:https://danielyxie.github.io/3ff33517-c87f-43cf-86e0-9eb8c9398d2d\",\"moduleSequenceNumber\":18098}],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"home\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServersWithClosedPorts, updatePortData} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet opened = {};\\n\\n\\tfor (let s of getServersWithClosedPorts(ns)) {\\n\\t\\tlet ports = [];\\n\\t\\tif (!ns.getServer(s).sshPortOpen && ns.fileExists('BruteSSH.exe', 'home')) {\\n\\t\\t\\tns.brutessh(s);\\n\\t\\t\\tports.push('ssh');\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).ftpPortOpen && ns.fileExists('FTPCrack.exe', 'home')) {\\n\\t\\t\\tns.ftpcrack(s);\\n\\t\\t\\tports.push('ftp');\\n\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).smtpPortOpen && ns.fileExists('relaySMTP.exe', 'home')) {\\n\\t\\t\\tns.relaysmtp(s);\\n\\t\\t\\tports.push('smtp');\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).httpPortOpen && ns.fileExists('HTTPWorm.exe', 'home')) {\\n\\t\\t\\tns.httpworm(s);\\n\\t\\t\\tports.push('http');\\n\\t\\t}\\n\\t\\tif (!ns.getServer(s).sqlPortOpen && ns.fileExists('SQLInject.exe', 'home')) {\\n\\t\\t\\tns.sqlinject(s)\\t\\n\\t\\t\\tports.push('sql');\\n\\t\\t}\\n\\t\\tif(ports.length) opened[s] = ports;\\n\\t}\\n\\tif(opened.length){\\n\\t\\tawait updatePortData(ns, 20, 'status', 'nuke');\\n\\t\\tawait updatePortData(ns, 20, 'opened', opened);\\n\\t}else{\\n\\t\\tawait updatePortData(ns, 20, 'status', 'hgw');\\n\\t}\\n}\",\"filename\":\"OpenPorts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/3f6ef8dd-dc2d-4099-934f-b5cefdb05e43\",\"moduleSequenceNumber\":456},{\"filename\":\"OpenPorts.js\",\"url\":\"blob:https://danielyxie.github.io/b938fdab-efcc-4f15-a77c-edae1a1bf561\",\"moduleSequenceNumber\":18085}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {updatePortData, getPortData, getMostProfitableServer, scpAll} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait deployScripts(ns);\\n\\tawait updatePortData(ns, 20, 'status', 'startup');\\n\\tawait updatePortData(ns, 20, 'opened', []);\\n\\tawait updatePortData(ns, 20, 'nuked', {});\\n\\t\\n}\\n\\n/** @param {NS} ns **/\\nasync function deployScripts(ns) {\\n\\tawait scpAll(ns, ['lib.js', 'Hack.js', 'Grow.js', 'Weaken.js']);\\n}\",\"filename\":\"DaemonSetup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/47f3414f-c8cc-4696-8d33-16cfc2381d5d\",\"moduleSequenceNumber\":456},{\"filename\":\"DaemonSetup.js\",\"url\":\"blob:https://danielyxie.github.io/e25c0d46-c5f9-4cb6-b1c6-f166aea53e24\",\"moduleSequenceNumber\":18084}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {updatePortData, getPortData, canNuke} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet openedServers = getPortData(ns, 20).opened;\\n\\tlet nuked = [];\\n\\tif(openedServers.length){\\n\\t\\tfor(let [s, p] of Object.entries(openedServers)){\\n\\t\\t\\tif(canNuke(ns, s)){\\n\\t\\t\\t\\tns.nuke(s);\\n\\t\\t\\t\\tnuked.push(s);\\n\\t\\t\\t\\tdelete openedServers[s];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tawait updatePortData(ns, 20, 'opened', openedServers);\\n\\tawait updatePortData(ns, 20, 'nuked', nuked);\\n\\tif(nuked.length) await updatePortData(ns, 20, 'status', 'hgwsetup');\\n}\",\"filename\":\"NukeAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/2c69ef48-5c2f-4bb8-8148-5b169165f86f\",\"moduleSequenceNumber\":456},{\"filename\":\"NukeAll.js\",\"url\":\"blob:https://danielyxie.github.io/48ac3381-5117-44c2-8e93-ac8b35d705cd\",\"moduleSequenceNumber\":18086}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getRemoteServers} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor (let s of getRemoteServers(ns)) {\\n\\t\\tns.scriptKill('Hack.js', s);\\n\\t\\tns.scriptKill('Grow.js', s);\\n\\t\\tns.scriptKill('Weaken.js', s);\\n\\t}\\n}\",\"filename\":\"KillHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet url = 'https://celeaxy.github.io/bitburner/'\\n\\tlet scripts = [];\\n\\tfor(let s of scripts){\\n\\t\\tawait ns.wget(`${url}${s}`, s, 'home');\\n\\t}\\n}\",\"filename\":\"UpdateScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"UpdateScripts.js\",\"url\":\"blob:https://danielyxie.github.io/246f8ff4-7653-44a4-9b9f-b10b78c972dc\",\"moduleSequenceNumber\":4894}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMostProfitableServer, getAllAvailableThreads, cogrow, coweaken, updatePortData, getPortData, logServerStatus } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getMostProfitableServer(ns);\\n\\n\\tlet hackSec = ns.hackAnalyzeSecurity(1);\\n\\tlet growSec = ns.growthAnalyzeSecurity(1);\\n\\tlet weakenSec = ns.weakenAnalyze(1);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\n\\tlet hthreads = 1;\\n\\tlet gthreads = (h) => Math.ceil(ns.growthAnalyze(target, 1 / (1 - ns.hackAnalyze(target) * h)));\\n\\tlet wthreads = (h, g) => Math.ceil((h * hackSec + g * growSec) / weakenSec);\\n\\tlet hgwthreads = (h) => h + gthreads(h) + wthreads(h, gthreads(h));\\n\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\n\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenSec / growSec | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW | 0;\\n\\t\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`not enough threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (!hasMaxMoney()) {\\n\\t\\tlet growTime = ns.getGrowTime(target);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tlet delta = weakenTime - growTime - 200;\\n\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target)));\\n\\t\\tif (threadsNeeded < threadsGrow) {\\n\\t\\t\\tthreadsGrow = threadsNeeded;\\n\\t\\t\\tthreadsWeaken = wthreads(0, threadsGrow);\\n\\t\\t}\\n\\t\\tcoweaken(ns, target, threadsWeaken);\\n\\t\\tawait ns.sleep(delta);\\n\\t\\tcogrow(ns, target, threadsGrow);\\n\\t\\tns.print(growTime);\\n\\t\\tawait ns.sleep(growTime + 400);\\n\\t}\\n\\n\\tlogServerStatus(ns, target);\\n\\n\\n\\twhile ((hthreads + 1) * ns.hackAnalyze(target) < 1 && hgwthreads(hthreads + 1) <= maxThreads )\\n\\t\\ththreads++;\\n\\tns.print(gthreads(hthreads));\\n\\tawait updatePortData(ns, 20, 'hgw', {\\n\\t\\t'target': target,\\n\\t\\t'hack': {\\n\\t\\t\\t'time': ns.getHackTime(target),\\n\\t\\t\\t'threads': hthreads\\n\\t\\t},\\n\\t\\t'grow': {\\n\\t\\t\\t'time': ns.getGrowTime(target),\\n\\t\\t\\t'threads': gthreads(hthreads)\\n\\t\\t},\\n\\t\\t'weaken': {\\n\\t\\t\\t'time': ns.getWeakenTime(target),\\n\\t\\t\\t'threads': wthreads(hthreads, gthreads(hthreads))\\n\\t\\t}\\n\\t});\\n\\tns.print(getPortData(ns, 20));\\n\\tawait updatePortData(ns, 20, 'status', 'hgw');\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoweaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n}\",\"filename\":\"HGWSetup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/ab920946-bd76-45f0-9cf9-cf0a9fd05ff6\",\"moduleSequenceNumber\":456},{\"filename\":\"HGWSetup.js\",\"url\":\"blob:https://danielyxie.github.io/aa892bc9-4ad6-441c-8b38-9634cee4f875\",\"moduleSequenceNumber\":18087}],\"dependents\":[],\"ramUsage\":11.05,\"server\":\"home\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-1-1024\",\"pserv-2-2048\",\"pserv-3-32768\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"68.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":471,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":472,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"ecorp\",\"moduleSequenceNumber\":473,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":474,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":475,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":476,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37839582844,\"moneyMax\":945989571100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1186,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-597359-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[18,116,135,51,155,123,3,169,60,72,179,110,189,45,191,198,31,105,198,118,82,35,173,39,126,129,67,136,198,114,129,50,82,102,152,167,185],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416538-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,7,0,5,1,0,0,8,8,6,8,5,7,8,7,1,4,5,3,4,1,3,2,7,0],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-799757.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,3,4,8,1,8,5,6,0,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"57.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":477,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":478,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"megacorp\",\"moduleSequenceNumber\":479,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":480,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":481,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":482,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49179668269,\"moneyMax\":1229491706725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1120,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"73.8.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":483,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":484,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":485,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":486,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":487,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":488,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":23646126505,\"moneyMax\":591153162625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1000,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-221567.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[1,0,0,1,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"16.3.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":489,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"blade\",\"moduleSequenceNumber\":490,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"blade\",\"moduleSequenceNumber\":491,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":492,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":493,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":494,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":36440692132,\"moneyMax\":911017303300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1193,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"69.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":495,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"nwo\",\"moduleSequenceNumber\":496,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"nwo\",\"moduleSequenceNumber\":497,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":498,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":499,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":500,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22963873479,\"moneyMax\":574096836975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1086,\"serverGrowth\":69}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64252-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[65,59,169,80,123,38,152,167,151,44,112,72,62,133,178,15,175,23,111],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846795.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[69,198,182,200,87],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"59.4.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":501,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":502,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":503,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":504,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":505,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":506,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":21812943422,\"moneyMax\":545323585550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1129,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"64.1.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":507,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":508,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"omnitek\",\"moduleSequenceNumber\":509,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":510,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":511,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":512,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":17049200246,\"moneyMax\":426230006150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1087,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"32.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":513,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":514,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"4sigma\",\"moduleSequenceNumber\":515,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":516,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":517,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":518,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":21892362663,\"moneyMax\":547309066575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-636055-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[1,95,88,70,99,127,50,9,199,80,61,37,69,63,187,48,88,185,37,130,126,122,164,118,164,46,162,139,108,143],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"14.8.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":519,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":520,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":521,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":522,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":523,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":524,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":26575629806,\"moneyMax\":664390745150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":991,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763166-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[50],[49],[23],[25],[28],[41],[12],[44],[10],[4],[14],[50],[33],[14],[27]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"14.3.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":525,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":526,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":527,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":528,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":529,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":530,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1561355277,\"moneyMax\":39033881925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1077,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"29.5.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":531,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":532,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":533,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":534,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":535,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":536,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1287,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-278157-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[9,1],[2,6,4],[9,3,1,4],[9,4,2,1,6],[8,7,4,9,3,2],[1,3,4,2,6,8,5],[7,5,9,2,9,5,7,6],[1,5,2,8,6,3,9,1,2],[3,2,7,1,7,8,6,5,2,6],[4,1,1,5,2,9,5,4,6,9,2]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"44.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":537,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":538,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"stormtech\",\"moduleSequenceNumber\":539,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":540,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":541,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":542,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1102223593,\"moneyMax\":27555589825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1022,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"64.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":543,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":544,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"defcomm\",\"moduleSequenceNumber\":545,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":546,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":547,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":548,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":864794112,\"moneyMax\":21619852800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":948,\"serverGrowth\":67}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106083-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[22,63,146,98],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"33.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":549,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":550,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"infocomm\",\"moduleSequenceNumber\":551,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":552,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":553,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":554,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":608842153,\"moneyMax\":15221053825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":930,\"serverGrowth\":67}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424849-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-3,7,7,-1,9,0,-1,-3,1,-1,-4,10,10,-2,8,9,4,-1,-2,-3,-7,8,-2,8,7,-8,5,-3,-2,0,6,0,5,-8,-10,-9,-7,2,1],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"27.2.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":555,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"helios\",\"moduleSequenceNumber\":556,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"helios\",\"moduleSequenceNumber\":557,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":558,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":559,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":560,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":620287052,\"moneyMax\":15507176300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"74.1.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":561,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":562,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"vitalife\",\"moduleSequenceNumber\":563,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":564,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":565,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":566,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":794339286,\"moneyMax\":19858482150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"67.3.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":567,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"icarus\",\"moduleSequenceNumber\":568,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"icarus\",\"moduleSequenceNumber\":569,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":570,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":571,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":572,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":901116038,\"moneyMax\":22527900950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"13.8.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":573,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":574,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":575,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":576,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":577,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":578,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1111219583,\"moneyMax\":27780489575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"70.7.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":579,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":580,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":581,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":582,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":583,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":584,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":831444144,\"moneyMax\":20786103600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"42.8.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":585,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":586,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"microdyne\",\"moduleSequenceNumber\":587,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":588,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":589,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":590,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":690144867,\"moneyMax\":17253621675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-609900-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[57,61,107,191],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"91.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":591,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":592,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":593,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":594,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":595,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":596,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":830645948,\"moneyMax\":20766148700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"9.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":597,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":598,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":599,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":600,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":601,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":602,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":758908662,\"moneyMax\":18972716550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-339129-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,6,0,0,4,0,4,9,2,0,0,9,5],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"14.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":603,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":604,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":605,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":606,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":607,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":608,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1056703241,\"moneyMax\":26417581025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247765.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[1,4],[1,4,4],[6,6,6,6]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555037-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,2],[12,13],[23,32],[8,14],[9,15],[6,12],[6,14],[13,17],[5,15],[16,22],[14,18],[19,26],[4,6],[19,23],[14,23],[5,10]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"96.3.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":609,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"omnia\",\"moduleSequenceNumber\":610,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"omnia\",\"moduleSequenceNumber\":611,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":612,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":613,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":614,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":977633189,\"moneyMax\":24440829725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"84.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":615,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":616,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zb-def\",\"moduleSequenceNumber\":617,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":618,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":619,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":620,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":1031972883,\"moneyMax\":25799322075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-462355-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":62,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346953-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a()()a())\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-972063-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a))())a((()()a))((\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"6.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":621,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":622,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":623,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":624,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":625,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":626,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":923645202,\"moneyMax\":23091130050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437642-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,11],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-643070-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,4],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"57.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":627,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"solaris\",\"moduleSequenceNumber\":628,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"solaris\",\"moduleSequenceNumber\":629,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":630,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":631,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":632,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":741259464,\"moneyMax\":18531486600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":756,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"9.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":633,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":634,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"deltaone\",\"moduleSequenceNumber\":635,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":636,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":637,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":638,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1493571750,\"moneyMax\":37339293750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134341-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())((a(a(()((a\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-192099-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[34,158,111,2,46,108,66,29,146,139,129,63,116,81,17,56,127,46,48,122,89,180,138,21,14,4,30,81,198,198,154,38,103,161,97,128,107,30,195,76,142,160,162],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"50.1.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":639,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":640,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":641,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":642,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":643,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":644,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1634388057,\"moneyMax\":40859701425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"69.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":645,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":646,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"nova-med\",\"moduleSequenceNumber\":647,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":648,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":649,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":650,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1209269765,\"moneyMax\":30231744125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"0.6.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":651,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":652,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":653,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":654,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":655,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":656,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1402327683,\"moneyMax\":35058192075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263129.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[1,6],[6,7,5],[6,7,1,3],[7,9,2,7,3],[2,7,2,3,1,8],[6,5,3,2,5,1,5],[2,7,8,5,8,8,1,8],[4,7,1,1,3,6,7,8,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73377-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,25],[7,12],[17,18],[14,17],[16,26],[21,31],[4,12],[1,11],[15,22],[21,26],[8,12],[19,23],[11,18],[24,26],[3,4],[1,8],[11,21],[16,25],[8,14],[20,30]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"68.3.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":657,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":658,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"unitalife\",\"moduleSequenceNumber\":659,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":660,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":661,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":662,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1047434294,\"moneyMax\":26185857350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-580361-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":81,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594598.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"20.0.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":663,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":664,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":665,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":666,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":667,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":668,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":742209320,\"moneyMax\":18555233000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":699,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-741992-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,1,-3,-2,4,-3,-5,5,10,3,-3,-1,3,-2,4,2,6,-10,-2,1,1,4,-7,-3,2,8,6,-6,-9,-2,10,6,-7,2,7,10,-3,-6,2],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-2705-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1],[0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-596023.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"96.1.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":669,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":670,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":671,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":672,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":673,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":674,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":639798074,\"moneyMax\":15994951850,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"18.5.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":675,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":676,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":677,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":678,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":679,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":680,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":624060594,\"moneyMax\":15601514850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":569,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737369-AlphaEnterprises.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"8799103150\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"32.4.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":681,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":682,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":683,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":684,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":685,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":686,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":296277591,\"moneyMax\":7406939775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":439,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"67.9.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":687,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":688,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":689,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":690,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":691,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":692,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":227688241,\"moneyMax\":5692206025,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":392,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-845035-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[8,3],[3,3,7],[3,2,7,6],[9,5,8,8,8]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146778.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"73.8.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":693,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":694,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":696,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":697,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":698,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":882598052,\"moneyMax\":22064951300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":774,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128207-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[4,3],[7,5,1]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-309991.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,4,7,0,7,0,2,3,0,10,1,0,10,5,0,3,10,0,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"50.6.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":699,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":700,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":701,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":702,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":703,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":704,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":259291221,\"moneyMax\":6482280525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":442,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431301-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,1,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,1,1,1,0,1,0,0,0,0],[0,0,0,0,0,0,1,1,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"8.9.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":705,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"syscore\",\"moduleSequenceNumber\":706,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"syscore\",\"moduleSequenceNumber\":707,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":708,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":709,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":710,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":571353257,\"moneyMax\":14283831425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":589,\"serverGrowth\":67}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-423050-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":523313126,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"48.9.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":711,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":712,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"catalyst\",\"moduleSequenceNumber\":713,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":714,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":715,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":716,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":544193703,\"moneyMax\":13604842575,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":33}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590817-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,8,0,-1,-5,10,9,0,0,7,5,-5,6,-3,4,-6,-3],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"93.7.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":717,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":718,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"the-hub\",\"moduleSequenceNumber\":719,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":720,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":721,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":722,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":175343353,\"moneyMax\":4383583825,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":304,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-405654.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,1],[0,0],[0,1],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-144244.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[2,7],[6,5,4],[2,2,2,5],[4,3,7,3,3],[7,9,3,3,7,2],[9,4,1,3,1,5,4],[1,5,1,3,1,3,7,8],[1,4,4,8,6,3,5,9,9],[9,8,3,8,9,8,8,2,5,1],[6,4,4,6,9,4,6,3,9,3,1],[4,7,7,3,5,3,4,4,8,3,1,2]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"7.7.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":723,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"comptek\",\"moduleSequenceNumber\":724,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"comptek\",\"moduleSequenceNumber\":725,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":726,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":727,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":728,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":239844409,\"moneyMax\":5996110225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":398,\"serverGrowth\":48}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"35.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":729,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"netlink\",\"moduleSequenceNumber\":730,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"netlink\",\"moduleSequenceNumber\":731,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":732,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":733,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":734,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":411,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-40049-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))(a((a)))\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"44.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":735,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":736,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":737,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":738,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":739,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":740,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":73013060,\"moneyMax\":1825326500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":287,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-380099.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[88,95,55,165,132,105,7,118,49,44,77,60,29,193,3,97,130,168,109,200,25,149,176,168,46,139,74,13,161,12,76,123,197,111,173,192,88,127,31,28,146,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"29.4.6.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":741,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":742,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"n00dles\",\"moduleSequenceNumber\":743,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":744,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/5526abe8-531b-4f53-8260-2b86fb6ebfb2\",\"moduleSequenceNumber\":742},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/8d2f2f99-2965-41bb-9285-be2365da4613\",\"moduleSequenceNumber\":29002}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":745,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/a943d622-de2c-4108-a4d1-bd31ea5867bb\",\"moduleSequenceNumber\":742},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6468ce08-5931-45d2-9f83-e5d2eb658a61\",\"moduleSequenceNumber\":18088}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":746,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.01,\"minDifficulty\":1,\"moneyAvailable\":1561153.7760782884,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-641256-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":891001507,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"96.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":747,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":748,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":749,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":750,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/46b1d68e-d1f7-4126-bbd7-482c290f10f2\",\"moduleSequenceNumber\":748},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/e64b6a25-879d-4eff-a6d4-ea0a6802ae9f\",\"moduleSequenceNumber\":29003}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":751,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/100ad8b3-8190-4cad-a745-0897baa479a1\",\"moduleSequenceNumber\":748},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7677db7e-3499-4b02-b0d6-7a09dac39781\",\"moduleSequenceNumber\":18089}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":752,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10.102,\"minDifficulty\":3,\"moneyAvailable\":2000008.9041785193,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105521-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[40,96,115,39,2,71,62,8,32,191,145,42,199,128,9,37,38,92,30,161,187,133,72,65,187,77,48],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"80.8.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":753,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":754,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":755,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":756,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/fb31982c-907e-4fae-8ac3-d34f921fee0f\",\"moduleSequenceNumber\":754},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/8ae94e4d-fbbf-4530-9c63-a6d9569048ea\",\"moduleSequenceNumber\":29005}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":757,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/58274b92-971b-4fee-8bad-8a7c22a90404\",\"moduleSequenceNumber\":754},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/04a4734a-6387-4a8e-b1a9-f9a88d39458e\",\"moduleSequenceNumber\":18091}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":758,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790461.cct\",\"type\":\"Total Ways to Sum\",\"data\":36,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"52.3.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":759,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":760,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"joesguns\",\"moduleSequenceNumber\":761,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":762,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/e6790ab8-6190-447e-b4b1-7bb7e51cb514\",\"moduleSequenceNumber\":760},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/65e60e17-d3df-4163-8916-f3f4563e39c5\",\"moduleSequenceNumber\":29006}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":763,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/0052916e-be1b-4369-b50d-a0b1300fe09b\",\"moduleSequenceNumber\":760},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c960af10-bfbd-4112-b353-87751bffd1f3\",\"moduleSequenceNumber\":18092}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":764,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":7.167999999999988,\"minDifficulty\":5,\"moneyAvailable\":1836071.3623970714,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"41.7.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":765,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"zer0\",\"moduleSequenceNumber\":766,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"zer0\",\"moduleSequenceNumber\":767,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":768,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":769,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":770,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"23.9.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":771,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":772,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":773,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":774,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/032b0ec6-5a60-4d3f-97a5-2477da9e65a1\",\"moduleSequenceNumber\":772},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/c58e91dc-7b55-478a-ad16-a0bcb8e972d8\",\"moduleSequenceNumber\":29004}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":775,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/ba1eb72d-d729-48c3-8243-0af447516e6e\",\"moduleSequenceNumber\":772},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a95b685e-13e6-4135-99cc-7e73b7c6995a\",\"moduleSequenceNumber\":18090}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":776,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-839918.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[54,15,72,175,37,55,167,176,29,3,108,93,166,171,20,200,35,13,20,188,92,45,98,56],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"8.2.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":777,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":778,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"neo-net\",\"moduleSequenceNumber\":779,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":780,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":781,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":782,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66182.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,1,0,0],[1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.3.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":783,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":784,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":785,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":786,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":787,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":788,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"28.9.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":789,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":790,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":791,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":792,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/7125e1bf-157d-4692-ae19-29a9beea9e99\",\"moduleSequenceNumber\":790},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/467fa5b6-b273-47d3-9cef-d5bba7938628\",\"moduleSequenceNumber\":29007}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":793,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/8e8538f6-a762-4c08-b43c-5e51350beaf7\",\"moduleSequenceNumber\":790},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/de854714-4c33-4f8f-bdc1-1c9111c475d6\",\"moduleSequenceNumber\":18093}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":794,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871206-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((aa((\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259797-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[1,9],[7,5,6],[4,3,8,8],[3,5,4,6,1],[3,2,9,6,7,5],[1,1,3,6,6,1,9],[3,1,6,3,6,4,3,4],[1,6,1,4,6,4,8,7,4]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"92.4.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":795,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":796,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":797,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":798,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/b5f8d14c-2952-42ef-9f39-a1147cd97367\",\"moduleSequenceNumber\":796},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/26b9692f-f59f-47b1-b362-5ee2fe89e614\",\"moduleSequenceNumber\":29008}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":799,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/ae3354c3-66f6-4ee2-94fe-f5c136a5398c\",\"moduleSequenceNumber\":796},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e126e036-1998-4918-9116-9f4909d88e68\",\"moduleSequenceNumber\":18094}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":800,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":69223.47009703233,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-935119.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())))(a((((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"72.2.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":801,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":802,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"phantasy\",\"moduleSequenceNumber\":803,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":804,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":805,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":806,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571063.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[164,111,96,61,150,49,80,94,96,162,47,38,143,177],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994768-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,11],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-919559-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,24],[1,4],[19,21],[5,15],[20,30],[20,28],[17,23],[10,13],[2,6],[14,19],[21,22],[7,12],[2,5]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"57.1.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":807,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":808,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":809,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":810,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":811,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":812,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-902860-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,-5,-2,5,-10,-10,0,-8],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"0.9.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":813,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":814,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"omega-net\",\"moduleSequenceNumber\":815,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":816,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":817,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":818,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":67719951,\"moneyMax\":1692998775,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":185,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"40.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":819,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":820,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":821,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":822,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":823,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":824,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":55639245,\"moneyMax\":1390981125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":237,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"38.9.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":825,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":826,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":827,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":828,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/988dcdff-d726-4fbf-aae1-abe939dea569\",\"moduleSequenceNumber\":826},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/52912aae-a32c-4f5e-a2da-b9642b2f3b8f\",\"moduleSequenceNumber\":29009}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":829,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/e154ba1d-d6b9-43ad-a363-ce2067fc1972\",\"moduleSequenceNumber\":826},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/9668f8f7-2924-4cad-95e9-c62a2f8a90bb\",\"moduleSequenceNumber\":18095}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":830,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":85.84,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-470157-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,12],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"37.2.2.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":831,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":832,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":833,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":834,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":835,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":836,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":478,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52581-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[172,124,4,95,127,45,187,83,177,52,28],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"71.2.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":837,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":838,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":839,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":840,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":841,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":842,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":970,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"83.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":843,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":844,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":845,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":846,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":847,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":848,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":726,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51114.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,9,7,4,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"97.4.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":849,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":850,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":851,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":852,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":853,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":854,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":523,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-528362.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[7,7],[8,1,6],[2,1,6,7],[3,8,7,4,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"81.8.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":855,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":856,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":857,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":858,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":859,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":860,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":345,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-556675-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a()a)a(((()a)aa(\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"67.4.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":861,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":862,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":863,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":864,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":865,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":866,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"83.8.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":867,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\".\",\"moduleSequenceNumber\":868,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\".\",\"moduleSequenceNumber\":869,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":870,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":871,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":872,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"87.4.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":873,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":874,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"CSEC\",\"moduleSequenceNumber\":875,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":876,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":877,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":878,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"37.1.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":879,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":880,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":881,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":882,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":883,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":884,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"23.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73514-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":358469058,\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837849.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,9,7,8,1,9,4,-5,2,-2,7,10,8,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"91.9.3.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":885,\"_hash\":\"db443e8eb7830be8bb227fcb9b39d76bd77b8c74d7e7cd10477e0e0024de7976\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":886,\"_hash\":\"78611630403df803c97df47fdfa780a73306b97b5deb8a5a10f301a765590b9f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"darkweb\",\"moduleSequenceNumber\":887,\"_hash\":\"ac7a348c6c4df2d3a8afceed863b1a6f42d183f0656349be3381a6a41c443cbf\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":888,\"_hash\":\"62c4ddda90b7e04b1caa4acc78e102b3370d81534031fb5d50c06ba61007ba10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":889,\"_hash\":\"dfdd4b42e8a5e60b52ef71f7ab9c78a8f6797e20281083d83454b1fc860e7e67\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":890,\"_hash\":\"3d35403897ed2bd3c7f55a2e4174c35f9bd3e568c4dc2df16572bbd7f994e938\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1-1024\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1-1024\",\"httpPortOpen\":false,\"ip\":\"12.3.1.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getTarget} from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\twhile(true){\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"allhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1-1024\",\"moduleSequenceNumber\":891}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"pserv-1-1024\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget, getAllAvailableThreads, coordinateWeaken, coordinateGrow, distributeThreads } from 'lib.js';\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tlet target = getTarget(ns);\\n\\n\\tlet isMinSecurity = () => ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target);\\n\\tlet hasMaxMoney = () => ns.getServerMoneyAvailable(target) == ns.getServerMaxMoney(target);\\n\\tif (!isMinSecurity()) await killSecurity(ns, target);\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet growEffect = ns.growthAnalyzeSecurity(1);\\n\\tlet maxThreads = getAllAvailableThreads(ns, 1.75);\\n\\n\\tlet ratioGW = weakenEffect / growEffect | 0;\\n\\tvar threadsWeaken = maxThreads / (ratioGW + 1) | 0;\\n\\tvar threadsGrow = threadsWeaken * ratioGW;\\n\\tif (!threadsWeaken) {\\n\\t\\tns.print(`Not enough Threads available.`);\\n\\t\\treturn;\\n\\t}\\n\\tvar firstPass = true;\\n\\n\\tlet weakenTime = ns.getWeakenTime(target);\\n\\tlet growTime = ns.getGrowTime(target);\\n\\tlet delta = weakenTime - growTime - 200;\\n\\twhile (!isMinSecurity() || !hasMaxMoney()) {\\n\\n\\t\\tif (!firstPass) {\\n\\t\\t\\tcoordinateWeaken(ns, target, threadsWeaken);\\n\\t\\t\\tawait ns.sleep(delta);\\n\\t\\t}\\n\\n\\t\\tfirstPass = firstPass || true;\\n\\n\\t\\tif (!hasMaxMoney()) {\\n\\t\\t\\tlet threadsNeeded = Math.ceil(ns.growthAnalyze(target, ns.getServerMaxMoney(target)/ns.getServerMoneyAvailable(target)));\\n\\t\\t\\tns.print(threadsNeeded);\\n\\t\\t\\tif(threadsNeeded < threadsGrow) threadsGrow = threadsNeeded;\\n\\t\\t\\tcoordinateGrow(ns, target, threadsGrow);\\n\\t\\t\\tlogStatus(ns, target);\\n\\t\\t\\tawait ns.sleep(growTime + 200);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nasync function killSecurity(ns, target) {\\n\\tlet weakenEffect = ns.weakenAnalyze(1, 1);\\n\\tlet weakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\twhile (weakensLeft) {\\n\\t\\tweakenEffect = ns.weakenAnalyze(1, 1);\\n\\t\\tvar numThreads = getAllAvailableThreads(ns, 1.75);\\n\\t\\tlet weakenTime = ns.getWeakenTime(target);\\n\\t\\tif (weakensLeft < numThreads) numThreads = weakensLeft;\\n\\t\\tcoordinateWeaken(ns, target, numThreads);\\n\\t\\tweakensLeft = Math.ceil((ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)) / weakenEffect);\\n\\t\\tif (weakensLeft) await ns.sleep(weakenTime + 200);\\n\\t}\\n\\tns.print(weakensLeft);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as-ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"prepareHGW.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"server\":\"pserv-1-1024\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/97ecc545-7cd6-4e99-b042-00023ad622ad\",\"moduleSequenceNumber\":890},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/fbb2aaaf-60a3-45ab-9212-f4fece43b40e\",\"moduleSequenceNumber\":9457}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1-1024\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/7dc7e24f-b63f-4160-97e8-5d8acd0ba093\",\"moduleSequenceNumber\":892},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/dc814bb3-2ead-4acd-bdc1-851c005095ea\",\"moduleSequenceNumber\":25381}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1-1024\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/3b139b6a-3c41-4af2-9e2a-e4df07f50c0c\",\"moduleSequenceNumber\":892},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c1c3c29c-2b6c-495a-b473-ae4b6703bfff\",\"moduleSequenceNumber\":18096}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1-1024\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2-2048\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2-2048\",\"httpPortOpen\":false,\"ip\":\"93.3.6.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/48970906-8e0d-490a-9c47-9014d51bef04\",\"moduleSequenceNumber\":50674},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/0750b479-ca60-4d96-91ca-e9711741cbc7\",\"moduleSequenceNumber\":63700}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/d598a80d-72b0-4742-9c7e-c9f3767d6c09\",\"moduleSequenceNumber\":897},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/c87beb3b-0464-4c3a-b252-5eae730e1969\",\"moduleSequenceNumber\":15417}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/75324c70-d55c-4de3-8a54-67b9b9025ed9\",\"moduleSequenceNumber\":897},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/11dd6950-a353-4b88-8e5c-ceb3daec1b58\",\"moduleSequenceNumber\":18097}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2-2048\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3-32768\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3-32768\",\"httpPortOpen\":false,\"ip\":\"31.0.4.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export {\\n\\tgetAllServers,\\n\\tgetHackableServers,\\n\\tgetNukableServers,\\n\\tgetHackedServers,\\n\\tgetRemoteServers,\\n\\tgetServersToHack,\\n\\tgetServersWithClosedPorts,\\n\\tcanHack,\\n\\tcanNuke,\\n\\tnukeAll,\\n\\tscpAll,\\n\\texecAll,\\n\\texecAllMax,\\n\\trmAllRemote,\\n\\tcleanAllRemote,\\n\\tkillAllRemote,\\n\\tneedsWeaken,\\n\\thasClosedPorts,\\n\\tgetMaxGrowth,\\n\\tgetMostProfitableServer,\\n\\tgetTarget,\\n\\tprepareHGW,\\n\\tgetAvailableThreads,\\n\\tgetAllAvailableThreads,\\n\\tdistributeThreads,\\n\\tlogStatus,\\n\\tcoexec,\\n\\tcohack,\\n\\tcogrow,\\n\\tcoweaken,\\n\\tupdatePortData,\\n\\tgetPortData,\\n\\trunScript,\\n\\tlogServerStatus\\n};\\n\\n/** @param {NS} ns **/\\nfunction getAllServers(ns) {\\n\\tvar visited = [];\\n\\tlet visit = function (host = 'home') {\\n\\t\\tvisited.push(host);\\n\\t\\tlet sub = ns.scan(host).filter(e => !visited.includes(e));\\n\\t\\tfor (let s of sub) {\\n\\t\\t\\tvisit(s);\\n\\t\\t}\\n\\t}\\n\\tvisit();\\n\\treturn visited;\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction canHack(ns, host) {\\n\\tlet server = ns.getServer(host);\\n\\tlet player = ns.getPlayer();\\n\\treturn server.requiredHackingSkill <= player.hacking && server.openPortCount >= server.numOpenPortsRequired;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackableServers(ns) {\\n\\treturn getServersToHack(ns).filter(e => canHack(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getHackedServers(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) && e != 'home' && !purchasedServers.includes(e));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} server\\n * **/\\nfunction hasClosedPorts(ns, server){\\n\\treturn ns.getServer(server).openPortCount < 5;\\n}\\n\\n\\n/** @param {NS} ns **/\\nfunction getServersWithClosedPorts(ns) {\\n\\tlet purchasedServers = ns.getPurchasedServers();\\n\\treturn getAllServers(ns).filter(e => ns.hasRootAccess(e) \\n\\t&& e != 'home' && !purchasedServers.includes(e) && hasClosedPorts(ns, e));\\n}\\n\\n/** @param {NS} ns **/\\nfunction getServersToHack(ns) {\\n\\treturn getAllServers(ns).filter(e => !ns.getServer(e).hasAdminRights);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} host\\n * **/\\nfunction canNuke(ns, host){\\n\\tlet server = ns.getServer(host);\\n\\treturn server.numOpenPortsRequired <= server.openPortCount;\\n}\\n/** @param {NS} ns **/\\nfunction nukeAll(ns) {\\n\\tlet nuked = getNukableServers(ns);\\n\\tfor (let s of nuked) {\\n\\t\\tns.nuke(s);\\n\\t}\\n\\treturn nuked;\\n}\\n\\n/** @param {NS} ns **/\\nfunction getNukableServers(ns){\\n\\treturn getServersToHack(ns).filter(e => canNuke(ns, e)); \\n}\\n/** @param {NS} ns **/\\nasync function scpAll(ns, files, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tawait ns.scp(files, src, s);\\n\\t}\\n}\\n/** @param {NS} ns **/\\nfunction getRemoteServers(ns) {\\n\\treturn getHackedServers(ns).concat(ns.getPurchasedServers());\\n}\\n/** @param {NS} ns **/\\nfunction execAll(ns, file, numThreads = 1, args, ...hosts) {\\n\\tlet servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\tfor (let s of (ns)) {\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction execAllMax(ns, file, args) {\\n\\tretur(ns).map(e => {\\n\\t\\tlet numThreads = ns.getServerMaxRam(e) / ns.getScriptRam(file) | 0 || 1;\\n\\t\\tns.exec(file, e, numThreads, args);\\n\\t});\\n\\t/*for (let s o(ns)) {\\n\\t\\tlet numThreads = ns.getServerMaxRam(s)/ns.getScriptRam(file) |0 || 1;\\n\\t\\tns.exec(file, s, numThreads, args);\\n\\t}*/\\n}\\n\\n/** @param {NS} ns **/\\nfunction cleanAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tfor (let f of ns.ls(s)) {\\n\\t\\t\\tns.rm(f, s);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction killAllRemote(ns, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.killall(s);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nfunction rmAllRemote(ns, file, src = 'home') {\\n\\tfor (let s of getAllServers(ns).filter(e => e != src)) {\\n\\t\\tns.rm(file, s);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction needsWeaken(ns, host, numThreads = 1) {\\n\\treturn ns.getServerMinSecurityLevel(host) + ns.weakenAnalyze(numThreads) < ns.getServerSecurityLevel(host);\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nfunction getMaxGrowth(ns, host) {\\n\\treturn ns.getServerMaxMoney(host) / ns.getServerMoneyAvailable(host);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getMostProfitableServer(ns) {\\n\\tlet maxMoney = (s) => ns.getServerMaxMoney(s);\\n\\treturn getHackedServers(ns).reduce((e, n) => maxMoney(e) > maxMoney(n) ? e : n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getTarget(ns) {\\n\\tif (!ns.args.length) {\\n\\t\\tns.print('No target specified!');\\n\\t\\treturn;\\n\\t}\\n\\treturn ns.args[0];\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * **/\\nasync function prepareHGW(ns, host) {\\n\\twhile (true) {\\n\\t\\twhile (needsWeaken(ns, host)) await ns.weaken(host);\\n\\t\\tif (ns.getServerMaxMoney(host) > ns.getServerMoneyAvailable(host)) {\\n\\t\\t\\tawait ns.grow(host);\\n\\t\\t} else break;\\n\\t}\\n\\tawait ns.weaken(host);\\n}\\n\\n/** @param {NS} ns \\n *  @param {String} host\\n * \\t@param {Number} ram\\n * **/\\nfunction getAvailableThreads(ns, host, ram, ignoreUsedRam = false) {\\n\\treturn (ns.getServerMaxRam(host) - (ignoreUsedRam ? 0 : ns.getServerUsedRam(host))) / ram | 0;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Number} numThreads\\n * \\t@param {Number} ram\\n * \\t@param {String[]} hosts\\n * **/\\nfunction distributeThreads(ns, numThreads, ram, hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts) servers = getRemoteServers(ns);\\n\\tlet maxAvailableThreads = getAllAvailableThreads(ns, ram);\\n\\tns.print(maxAvailableThreads);\\n\\tif (maxAvailableThreads < numThreads) {\\n\\t\\tns.print(`Not enough available threads on machines: [${servers}]!`);\\n\\t\\tns.print(`Available threads: ${maxAvailableThreads}`);\\n\\t\\tns.print(`Requested threads: ${numThreads}`);\\n\\t\\treturn null;\\n\\t}\\n\\tvar tmap = {};\\n\\tvar threadsLeft = numThreads;\\n\\tfor (let s of servers) {\\n\\t\\tif (!threadsLeft) break;\\n\\t\\tvar threads = getAvailableThreads(ns, s, ram);\\n\\t\\tif (!threads) continue;\\n\\t\\tif (threadsLeft < threads) threads = threadsLeft;\\n\\t\\ttmap[s] = threads;\\n\\t\\tthreadsLeft -= threads;\\n\\t}\\n\\treturn tmap;\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Number} ram\\n * \\t@param {Boolean} ignoreUsedRam\\n * \\t@param {String[]} hosts\\n * **/\\nfunction getAllAvailableThreads(ns, ram, ignoreUsedRam = false, ...hosts) {\\n\\tvar servers = hosts;\\n\\tif (!hosts.length) servers = getRemoteServers(ns);\\n\\treturn servers.map(e => getAvailableThreads(ns, e, ram, ignoreUsedRam)).reduce((e, n) => e + n);\\n}\\n\\n/** @param {NS} ns **/\\nfunction logStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${(as - ms / ms) * 100}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} file\\n * \\t@param {Number} numThreads\\n * \\t@param {Number} ramCost\\n * \\t@param {String[]} args\\n * \\t@param {String[]} hosts\\n * **/\\nfunction coexec(ns, file, numThreads, ramCost, args, hosts){\\n\\tfor (let [s, t] of Object.entries(distributeThreads(ns, numThreads, ramCost, hosts))) {\\n\\t\\tns.exec(file, s, t, args);\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cohack(ns, target, threads) {\\n\\tcoexec(ns, 'Hack.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction cogrow(ns, target, threads) {\\n\\tcoexec(ns, 'Grow.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * \\t@param {Number} threads\\n * **/\\nfunction coweaken(ns, target, threads) {\\n\\tcoexec(ns, 'Weaken.js', threads, 1.75, target);\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * \\t@param {String} key\\n * \\t@param {Any} data\\n * **/\\nasync function updatePortData(ns, port, key, data){\\n\\tlet update = {};\\n\\tif(ns.peek(port) != 'NULL PORT DATA'){\\n\\t\\tupdate = JSON.parse(ns.readPort(port));\\n\\t}\\n\\tupdate[key] = data;\\n\\tawait ns.writePort(port, JSON.stringify(update));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {Number} port\\n * **/\\nfunction getPortData(ns, port){\\n\\treturn JSON.parse(ns.peek(port));\\n}\\n\\n/** @param {NS} ns \\n * \\t@param {String} script\\n * \\t@param {String} host\\n * **/\\nasync function runScript(ns, script, numThreads, ...args){\\n\\tns.run(script, numThreads, ...args);\\n\\twhile(ns.scriptRunning(script, ns.getHostname())) await ns.sleep(200);\\n}\\n\\n\\n/** @param {NS} ns \\n * \\t@param {String} target\\n * **/\\nfunction logServerStatus(ns, target) {\\n\\tlet ms = ns.getServerMinSecurityLevel(target);\\n\\tlet as = ns.getServerSecurityLevel(target);\\n\\tns.print(`Security at ${((as - ms) / ms * 100).toFixed(2)}%. (${as}/${ms})`);\\n\\tlet mm = ns.getServerMaxMoney(target);\\n\\tlet am = ns.getServerMoneyAvailable(target);\\n\\tns.print(`Growth at ${(am / mm * 100).toFixed(2)}%. (${am | 0}/${mm})`);\\n}\",\"filename\":\"lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.2,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"Hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/6423e37b-6db9-473f-b095-4e663ae19aa9\",\"moduleSequenceNumber\":901},{\"filename\":\"Hack.js\",\"url\":\"blob:https://danielyxie.github.io/2efa1d5c-0dad-4275-8875-afc0443c2296\",\"moduleSequenceNumber\":16323}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"Grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/e5fb69a7-1dea-480a-a869-13ee31f80cdc\",\"moduleSequenceNumber\":901},{\"filename\":\"Grow.js\",\"url\":\"blob:https://danielyxie.github.io/e44a9734-d1d3-44f4-9bfb-b4b2b304782a\",\"moduleSequenceNumber\":15418}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTarget } from 'lib.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = getTarget(ns);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"Weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib.js\",\"url\":\"blob:https://danielyxie.github.io/cd29e344-047d-419c-b438-4715e1bd77cd\",\"moduleSequenceNumber\":901},{\"filename\":\"Weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d8a48fd3-effc-408a-9f2e-9ed4d2570f41\",\"moduleSequenceNumber\":29001}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3-32768\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":166912.59103075124,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"maxM\":\"run maxMoney.js\",\"infest\":\"run infest.js\",\"killr\":\"run KillRemotes.js\",\"cleanr\":\"run CleanRemotes.js\",\"update\":\"run UpdateScripts.js\"}","GlobalAliasesSave":"{\"test\":\"run test.js\",\"daemon\":\"run Daemon.js\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":11,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643727788014","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643803109567"}}